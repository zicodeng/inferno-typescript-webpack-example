{"version":3,"sources":["webpack:///app-bundle.min.js","webpack:///webpack/bootstrap 22a8796db52361b4d4a1","webpack:///./node_modules/inferno/index.js","webpack:///./src/app.tsx","webpack:///./node_modules/inferno/dist/index.js","webpack:///./node_modules/inferno-component/index.js","webpack:///./node_modules/inferno-component/dist/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_inferno","_infernoComponent","_infernoComponent2","obj","App","_Component","context","this","_this","getPrototypeOf","title","description","state","data","testSpreadOperator","createVNode","version","friends","people","concat","console","log","render","document","getElementById","isStatefulComponent","isUndefined","isStringOrNumber","type","isNullOrUndef","isNull","isInvalid","isTrue","isFunction","isString","isNumber","isObject","throwError","message","ERROR_MSG","Error","combineFrom","first","second","out","key$1","Lifecycle","listeners","handleEvent","lastEvent","nextEvent","dom","delegatedRoots","delegatedEvents$1","items","Map","docEvent","attachEventToDocument","set","isiOS","trapClickOnNonInteractiveElement","delete","size","removeEventListener","normalizeEventName","dispatchEvents","event","count","isClick","eventData","eventsToTrigger","cancelBubble","parentNode","disabled","substr","toLowerCase","stopPropagation","stopImmediatePropagation","e","addEventListener","emptyFn","onclick","isCheckedType","onTextInputChange","vNode","EMPTY_OBJ","previousValue","onInput","oninput","newVNode","newProps","applyValue","wrappedOnChange","onChange","onCheckboxChange","onClick","processInput","nextPropsOrEmpty","mounting","isControlled","wrapped","onchange","checked","multiple","defaultValue","hasValue","setAttribute","updateChildOptionGroup","children","isArray","len","updateChildOption","isVNode","indexOf","selected","onSelectChange","applyValue$1","processSelect","wrappedOnChange$1","onTextareaInputChange","applyValue$2","processTextarea","domValue","processElement","flags","isControlledFormElement","normalizeChildNodes","parentDom","firstChild","nodeType","placeholder","createTextNode","replaceChild","nextSibling","lastDom","previousSibling","removeChild","hydrateComponent","lifecycle","isSVG","isClass","ref","_isSVG","namespaceURI","svgNS","createClassComponentInstance","input","_lastInput","_vNode","hydrate","_childContext","mountClassComponentCallbacks","_updating","options","findDOMNodeEnabled","componentToDOMNodeMap","input$1","createFunctionalComponentInput","mountFunctionalComponentCallbacks","hydrateElement","className","tagName","newDom","mountElement","isSamePropsInnerHTML","textContent","hydrateChildren","hasControlledValue","isFormElement","prop","patchProp","removeAttribute","mountRef","appendChild","nodeValue","child","mount","nextSibling$1","hydrateText","mountText","text","hydrateVoid","hydrateRoot","recycleElement","tag","pools","elementPools","pool","nonKeyed","keyed","recycledVNode","pop","patchElement","poolElement","push","recycleComponent","componentPools","patchComponent","poolComponent","hooks","onComponentWillMount","onComponentWillUnmount","onComponentDidMount","onComponentWillUpdate","onComponentDidUpdate","unmount","canRecycle","isRecycling","unmountComponent","unmountElement","unmountVoidOrText","isStatefulComponent$$1","_unmounted","beforeUnmount","componentWillUnmount","_lifecycle","recyclingEnabled","unmountRef","unmountChildren$1","isAttrAnEvent","patchEvent","findDOMNode","getRoot","roots","root","setRoot","removeRoot","splice","documentBody","NO_OP","directClone","trigger","lifecycle$1","patch","rootInput","createRenderer","lastInput","nextInput","lastVNode","nextVNode","lastFlags","nextFlags","replaceVNode","mountComponent","patchText","patchVoid","mountVoid","replaceLastChildAndUnmount","unmountChildren","removeAllChildren","nextTag","replaceWithNewNode","lastProps","nextProps","lastChildren","nextChildren","nextRef","lastClassName","nextClassName","patchChildren","lastPropsOrEmpty","nextValue","prop$1","removeProp","patchArray","patchKeyed","setTextContent","mountArrayChildren","updateTextContent","isKeyed","patchKeyedChildren","patchNonKeyedChildren","lastType","nextType","lastKey","nextKey","hasComponentDidUpdate","componentDidUpdate","nextState","lastState","childContext","_updateComponent","didUpdate","getChildContext","createVoidVNode","createTextVNode","parentVNode","afterUpdate","shouldUpdate","lastProps$1","nextHooks","nextHooksDefined","lastInput$1","nextInput$1","onComponentShouldUpdate","nextText","lastChildrenLength","nextChildrenLength","commonLength","nextChild","nextChild$1","a","b","j","aNode","bNode","nextNode","nextPos","node","aLength","bLength","aEnd","bEnd","aStart","bStart","aStartNode","bStartNode","aEndNode","bEndNode","outer","insertOrAppend","sources","Array","moved","pos","patched","keyIndex","seq","lis_algorithm","arr","u","v","slice","result","arrI","attr","lastValue","skipProps","has","booleanProps","strictProps","patchStyle","lastHtml","__html","nextHtml","isSameInnerHTML","innerHTML","namespaces","setAttributeNS","delegatedEvents","nameLowerCase","domEvent","linkEvent","lastAttrValue","nextAttrValue","style","domStyle","cssText","isUnitlessNumber","documentCreateElement","childrenIsSVG","hasDidMount","componentDidMount","afterMount","addListener","Component","_blockSetState","_pendingSetState","componentWillMount","_blockRender","beforeRender","afterRender","component","newNode","insertBefore","createElementNS","createElement","lastNode","nextDom","removeChildren","tempdom","Boolean","dangerouslySetInnerHTML","VNode","noNormalise","normalize","vNodeToClone","propsToClone","newChildren","tmpArray","props$1","propsToClone$1","cloneVNode","_children","len$2","arguments","childrenLen","len$1","tmpArray$1","i$1","applyKey","applyKeyIfMissing","applyKeyPrefix","_normalizeVNodes","nodes","index","currentKey","normalizeVNodes","newNodes","normalizeChildren","normalizeProps","getFlagsForElementVnode","defaultProps","isBrowser","window","callback","listener","shift","xlinkNS","xmlNS","Set","add","navigator","platform","test","body","internal_DOMNodeMap","internal_isUnitlessNumber","internal_normalize","internal_patch","updateParentComponentVNodes","addToQueue","force","queue","componentCallbackQueue","resolvedPromise","then","applyState","queueStateChanges","newState","pending","_pendingState","stateKey","bind","pendingState","prevState","inferno","lifeCycle","Promise","resolve","forceUpdate","setState","prevProps","fromSetState","componentWillReceiveProps","beforeState","afterState","shouldComponentUpdate","componentWillUpdate","nextContext"],"mappings":"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","file":"app-bundle.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2).default;\nmodule.exports.default = module.exports;\n\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _inferno = __webpack_require__(0);\n\nvar _infernoComponent = __webpack_require__(3);\n\nvar _infernoComponent2 = _interopRequireDefault(_infernoComponent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar App = function (_Component) {\n    _inherits(App, _Component);\n\n    function App(props, context) {\n        _classCallCheck(this, App);\n\n        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props, context));\n\n        _this.title = \"Inferno TypeScript Webpack Example\";\n        _this.description = \"This repo demonstrates how to set up an Inferno app with TypeScript and Webpack.\";\n        _this.state = {\n            data: \"some data\"\n        };\n        _this.testSpreadOperator();\n        return _this;\n    }\n\n    _createClass(App, [{\n        key: 'render',\n        value: function render() {\n            return (0, _inferno.createVNode)(2, 'div', null, [(0, _inferno.createVNode)(2, 'h1', null, this.title), (0, _inferno.createVNode)(2, 'h2', null, 'Welcome to Inferno ' + _inferno.version), (0, _inferno.createVNode)(2, 'p', null, this.description), (0, _inferno.createVNode)(2, 'p', null, this.state.data)]);\n        }\n    }, {\n        key: 'testSpreadOperator',\n        value: function testSpreadOperator() {\n            var friends = [\"Zico\", \"Jack\", \"Rose\"];\n            var people = [\"Daniel\", \"Toby\"].concat(friends);\n            console.log(people);\n        }\n    }]);\n\n    return App;\n}(_infernoComponent2.default);\n\n(0, _inferno.render)((0, _inferno.createVNode)(16, App), document.getElementById('app'));\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\r\n * @module Inferno-Shared\r\n */ /** TypeDoc Comment */\r\nvar NO_OP = \"$NO_OP\";\r\nvar ERROR_MSG = \"a runtime error occured! Use Inferno in development environment to find the error.\";\r\n// This should be boolean and not reference to window.document\r\nvar isBrowser = !!(typeof window !== \"undefined\" && window.document);\r\n// this is MUCH faster than .constructor === Array and instanceof Array\r\n// in Node 7 and the later versions of V8, slower in older versions though\r\nvar isArray = Array.isArray;\r\nfunction isStatefulComponent(o) {\r\n    return !isUndefined(o.prototype) && !isUndefined(o.prototype.render);\r\n}\r\nfunction isStringOrNumber(o) {\r\n    var type = typeof o;\r\n    return type === \"string\" || type === \"number\";\r\n}\r\nfunction isNullOrUndef(o) {\r\n    return isUndefined(o) || isNull(o);\r\n}\r\nfunction isInvalid(o) {\r\n    return isNull(o) || o === false || isTrue(o) || isUndefined(o);\r\n}\r\nfunction isFunction(o) {\r\n    return typeof o === \"function\";\r\n}\r\nfunction isString(o) {\r\n    return typeof o === \"string\";\r\n}\r\nfunction isNumber(o) {\r\n    return typeof o === \"number\";\r\n}\r\nfunction isNull(o) {\r\n    return o === null;\r\n}\r\nfunction isTrue(o) {\r\n    return o === true;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === void 0;\r\n}\r\nfunction isObject(o) {\r\n    return typeof o === \"object\";\r\n}\r\nfunction throwError(message) {\r\n    if (!message) {\r\n        message = ERROR_MSG;\r\n    }\r\n    throw new Error((\"Inferno Error: \" + message));\r\n}\r\nfunction warning(message) {\r\n    // tslint:disable-next-line:no-console\r\n    console.warn(message);\r\n}\r\nfunction combineFrom(first, second) {\r\n    var out = {};\r\n    if (first) {\r\n        for (var key in first) {\r\n            out[key] = first[key];\r\n        }\r\n    }\r\n    if (second) {\r\n        for (var key$1 in second) {\r\n            out[key$1] = second[key$1];\r\n        }\r\n    }\r\n    return out;\r\n}\r\nfunction Lifecycle() {\r\n    this.listeners = [];\r\n}\r\nLifecycle.prototype.addListener = function addListener(callback) {\r\n    this.listeners.push(callback);\r\n};\r\nLifecycle.prototype.trigger = function trigger() {\r\n    var listeners = this.listeners;\r\n    var listener;\r\n    // We need to remove current listener from array when calling it, because more listeners might be added\r\n    while ((listener = listeners.shift())) {\r\n        listener();\r\n    }\r\n};\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar options = {\r\n    afterMount: null,\r\n    afterRender: null,\r\n    afterUpdate: null,\r\n    beforeRender: null,\r\n    beforeUnmount: null,\r\n    createVNode: null,\r\n    findDOMNodeEnabled: false,\r\n    recyclingEnabled: false,\r\n    roots: []\r\n};\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar xlinkNS = \"http://www.w3.org/1999/xlink\";\r\nvar xmlNS = \"http://www.w3.org/XML/1998/namespace\";\r\nvar svgNS = \"http://www.w3.org/2000/svg\";\r\nvar strictProps = new Set();\r\nstrictProps.add(\"volume\");\r\nstrictProps.add(\"defaultChecked\");\r\nvar booleanProps = new Set();\r\nbooleanProps.add(\"muted\");\r\nbooleanProps.add(\"scoped\");\r\nbooleanProps.add(\"loop\");\r\nbooleanProps.add(\"open\");\r\nbooleanProps.add(\"checked\");\r\nbooleanProps.add(\"default\");\r\nbooleanProps.add(\"capture\");\r\nbooleanProps.add(\"disabled\");\r\nbooleanProps.add(\"readOnly\");\r\nbooleanProps.add(\"required\");\r\nbooleanProps.add(\"autoplay\");\r\nbooleanProps.add(\"controls\");\r\nbooleanProps.add(\"seamless\");\r\nbooleanProps.add(\"reversed\");\r\nbooleanProps.add(\"allowfullscreen\");\r\nbooleanProps.add(\"novalidate\");\r\nbooleanProps.add(\"hidden\");\r\nbooleanProps.add(\"autoFocus\");\r\nbooleanProps.add(\"selected\");\r\nbooleanProps.add(\"indeterminate\");\r\nvar namespaces = new Map();\r\nnamespaces.set(\"xlink:href\", xlinkNS);\r\nnamespaces.set(\"xlink:arcrole\", xlinkNS);\r\nnamespaces.set(\"xlink:actuate\", xlinkNS);\r\nnamespaces.set(\"xlink:show\", xlinkNS);\r\nnamespaces.set(\"xlink:role\", xlinkNS);\r\nnamespaces.set(\"xlink:title\", xlinkNS);\r\nnamespaces.set(\"xlink:type\", xlinkNS);\r\nnamespaces.set(\"xml:base\", xmlNS);\r\nnamespaces.set(\"xml:lang\", xmlNS);\r\nnamespaces.set(\"xml:space\", xmlNS);\r\nvar isUnitlessNumber = new Set();\r\nisUnitlessNumber.add(\"animationIterationCount\");\r\nisUnitlessNumber.add(\"borderImageOutset\");\r\nisUnitlessNumber.add(\"borderImageSlice\");\r\nisUnitlessNumber.add(\"borderImageWidth\");\r\nisUnitlessNumber.add(\"boxFlex\");\r\nisUnitlessNumber.add(\"boxFlexGroup\");\r\nisUnitlessNumber.add(\"boxOrdinalGroup\");\r\nisUnitlessNumber.add(\"columnCount\");\r\nisUnitlessNumber.add(\"flex\");\r\nisUnitlessNumber.add(\"flexGrow\");\r\nisUnitlessNumber.add(\"flexPositive\");\r\nisUnitlessNumber.add(\"flexShrink\");\r\nisUnitlessNumber.add(\"flexNegative\");\r\nisUnitlessNumber.add(\"flexOrder\");\r\nisUnitlessNumber.add(\"gridRow\");\r\nisUnitlessNumber.add(\"gridColumn\");\r\nisUnitlessNumber.add(\"fontWeight\");\r\nisUnitlessNumber.add(\"lineClamp\");\r\nisUnitlessNumber.add(\"lineHeight\");\r\nisUnitlessNumber.add(\"opacity\");\r\nisUnitlessNumber.add(\"order\");\r\nisUnitlessNumber.add(\"orphans\");\r\nisUnitlessNumber.add(\"tabSize\");\r\nisUnitlessNumber.add(\"widows\");\r\nisUnitlessNumber.add(\"zIndex\");\r\nisUnitlessNumber.add(\"zoom\");\r\nisUnitlessNumber.add(\"fillOpacity\");\r\nisUnitlessNumber.add(\"floodOpacity\");\r\nisUnitlessNumber.add(\"stopOpacity\");\r\nisUnitlessNumber.add(\"strokeDasharray\");\r\nisUnitlessNumber.add(\"strokeDashoffset\");\r\nisUnitlessNumber.add(\"strokeMiterlimit\");\r\nisUnitlessNumber.add(\"strokeOpacity\");\r\nisUnitlessNumber.add(\"strokeWidth\");\r\nvar skipProps = new Set();\r\nskipProps.add(\"children\");\r\nskipProps.add(\"childrenType\");\r\nskipProps.add(\"defaultValue\");\r\nskipProps.add(\"ref\");\r\nskipProps.add(\"key\");\r\nskipProps.add(\"checked\");\r\nskipProps.add(\"multiple\");\r\nvar delegatedEvents = new Set();\r\ndelegatedEvents.add(\"onClick\");\r\ndelegatedEvents.add(\"onMouseDown\");\r\ndelegatedEvents.add(\"onMouseUp\");\r\ndelegatedEvents.add(\"onMouseMove\");\r\ndelegatedEvents.add(\"onSubmit\");\r\ndelegatedEvents.add(\"onDblClick\");\r\ndelegatedEvents.add(\"onKeyDown\");\r\ndelegatedEvents.add(\"onKeyUp\");\r\ndelegatedEvents.add(\"onKeyPress\");\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar isiOS = isBrowser &&\r\n    !!navigator.platform &&\r\n    /iPad|iPhone|iPod/.test(navigator.platform);\r\nvar delegatedEvents$1 = new Map();\r\nfunction handleEvent(name, lastEvent, nextEvent, dom) {\r\n    var delegatedRoots = delegatedEvents$1.get(name);\r\n    if (nextEvent) {\r\n        if (!delegatedRoots) {\r\n            delegatedRoots = { items: new Map(), docEvent: null };\r\n            delegatedRoots.docEvent = attachEventToDocument(name, delegatedRoots);\r\n            delegatedEvents$1.set(name, delegatedRoots);\r\n        }\r\n        if (!lastEvent) {\r\n            if (isiOS && name === \"onClick\") {\r\n                trapClickOnNonInteractiveElement(dom);\r\n            }\r\n        }\r\n        delegatedRoots.items.set(dom, nextEvent);\r\n    }\r\n    else if (delegatedRoots) {\r\n        var items = delegatedRoots.items;\r\n        if (items.delete(dom)) {\r\n            // If any items were deleted, check if listener need to be removed\r\n            if (items.size === 0) {\r\n                document.removeEventListener(normalizeEventName(name), delegatedRoots.docEvent);\r\n                delegatedEvents$1.delete(name);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction dispatchEvents(event, target, items, count, isClick, eventData) {\r\n    var dom = target;\r\n    while (count > 0) {\r\n        var eventsToTrigger = items.get(dom);\r\n        if (eventsToTrigger) {\r\n            count--;\r\n            // linkEvent object\r\n            eventData.dom = dom;\r\n            if (eventsToTrigger.event) {\r\n                eventsToTrigger.event(eventsToTrigger.data, event);\r\n            }\r\n            else {\r\n                eventsToTrigger(event);\r\n            }\r\n            if (event.cancelBubble) {\r\n                return;\r\n            }\r\n        }\r\n        dom = dom.parentNode;\r\n        // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,\r\n        // because the event listener is on document.body\r\n        // Don't process clicks on disabled elements\r\n        if (dom === null || (isClick && dom.disabled)) {\r\n            return;\r\n        }\r\n    }\r\n}\r\nfunction normalizeEventName(name) {\r\n    return name.substr(2).toLowerCase();\r\n}\r\nfunction stopPropagation() {\r\n    this.cancelBubble = true;\r\n    this.stopImmediatePropagation();\r\n}\r\nfunction attachEventToDocument(name, delegatedRoots) {\r\n    var docEvent = function (event) {\r\n        var count = delegatedRoots.items.size;\r\n        if (count > 0) {\r\n            event.stopPropagation = stopPropagation;\r\n            // Event data needs to be object to save reference to currentTarget getter\r\n            var eventData = {\r\n                dom: document\r\n            };\r\n            try {\r\n                Object.defineProperty(event, \"currentTarget\", {\r\n                    configurable: true,\r\n                    get: function get() {\r\n                        return eventData.dom;\r\n                    }\r\n                });\r\n            }\r\n            catch (e) {\r\n                /* safari7 and phantomJS will crash */\r\n            }\r\n            dispatchEvents(event, event.target, delegatedRoots.items, count, event.type === \"click\", eventData);\r\n        }\r\n    };\r\n    document.addEventListener(normalizeEventName(name), docEvent);\r\n    return docEvent;\r\n}\r\n// tslint:disable-next-line:no-empty\r\nfunction emptyFn() { }\r\nfunction trapClickOnNonInteractiveElement(dom) {\r\n    // Mobile Safari does not fire properly bubble click events on\r\n    // non-interactive elements, which means delegated click listeners do not\r\n    // fire. The workaround for this bug involves attaching an empty click\r\n    // listener on the target node.\r\n    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\r\n    // Just set it using the onclick property so that we don't have to manage any\r\n    // bookkeeping for it. Not sure if we need to clear it when the listener is\r\n    // removed.\r\n    // TODO: Only do this for the relevant Safaris maybe?\r\n    dom.onclick = emptyFn;\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction isCheckedType(type) {\r\n    return type === \"checkbox\" || type === \"radio\";\r\n}\r\nfunction onTextInputChange(e) {\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    var previousValue = props.value;\r\n    if (props.onInput) {\r\n        var event = props.onInput;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.oninput) {\r\n        props.oninput(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    if (previousValue !== newProps.value) {\r\n        // When this happens we need to store current cursor position and restore it, to avoid jumping\r\n        applyValue(newProps, dom);\r\n    }\r\n}\r\nfunction wrappedOnChange(e) {\r\n    var props = this.vNode.props || EMPTY_OBJ;\r\n    var event = props.onChange;\r\n    if (event.event) {\r\n        event.event(event.data, e);\r\n    }\r\n    else {\r\n        event(e);\r\n    }\r\n}\r\nfunction onCheckboxChange(e) {\r\n    e.stopPropagation(); // This click should not propagate its for internal use\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    if (props.onClick) {\r\n        var event = props.onClick;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.onclick) {\r\n        props.onclick(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    applyValue(newProps, dom);\r\n}\r\nfunction processInput(vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    applyValue(nextPropsOrEmpty, dom);\r\n    if (isControlled) {\r\n        dom.vNode = vNode; // TODO: Remove this when implementing Fiber's\r\n        if (mounting) {\r\n            if (isCheckedType(nextPropsOrEmpty.type)) {\r\n                dom.onclick = onCheckboxChange;\r\n                dom.onclick.wrapped = true;\r\n            }\r\n            else {\r\n                dom.oninput = onTextInputChange;\r\n                dom.oninput.wrapped = true;\r\n            }\r\n            if (nextPropsOrEmpty.onChange) {\r\n                dom.onchange = wrappedOnChange;\r\n                dom.onchange.wrapped = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction applyValue(nextPropsOrEmpty, dom) {\r\n    var type = nextPropsOrEmpty.type;\r\n    var value = nextPropsOrEmpty.value;\r\n    var checked = nextPropsOrEmpty.checked;\r\n    var multiple = nextPropsOrEmpty.multiple;\r\n    var defaultValue = nextPropsOrEmpty.defaultValue;\r\n    var hasValue = !isNullOrUndef(value);\r\n    if (type && type !== dom.type) {\r\n        dom.setAttribute(\"type\", type);\r\n    }\r\n    if (multiple && multiple !== dom.multiple) {\r\n        dom.multiple = multiple;\r\n    }\r\n    if (!isNullOrUndef(defaultValue) && !hasValue) {\r\n        dom.defaultValue = defaultValue + \"\";\r\n    }\r\n    if (isCheckedType(type)) {\r\n        if (hasValue) {\r\n            dom.value = value;\r\n        }\r\n        if (!isNullOrUndef(checked)) {\r\n            dom.checked = checked;\r\n        }\r\n    }\r\n    else {\r\n        if (hasValue && dom.value !== value) {\r\n            dom.defaultValue = value;\r\n            dom.value = value;\r\n        }\r\n        else if (!isNullOrUndef(checked)) {\r\n            dom.checked = checked;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction updateChildOptionGroup(vNode, value) {\r\n    var type = vNode.type;\r\n    if (type === \"optgroup\") {\r\n        var children = vNode.children;\r\n        if (isArray(children)) {\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                updateChildOption(children[i], value);\r\n            }\r\n        }\r\n        else if (isVNode(children)) {\r\n            updateChildOption(children, value);\r\n        }\r\n    }\r\n    else {\r\n        updateChildOption(vNode, value);\r\n    }\r\n}\r\nfunction updateChildOption(vNode, value) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    // we do this as multiple may have changed\r\n    dom.value = props.value;\r\n    if ((isArray(value) && value.indexOf(props.value) !== -1) ||\r\n        props.value === value) {\r\n        dom.selected = true;\r\n    }\r\n    else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {\r\n        dom.selected = props.selected || false;\r\n    }\r\n}\r\nfunction onSelectChange(e) {\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    var previousValue = props.value;\r\n    if (props.onChange) {\r\n        var event = props.onChange;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.onchange) {\r\n        props.onchange(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    if (previousValue !== newProps.value) {\r\n        // When this happens we need to store current cursor position and restore it, to avoid jumping\r\n        applyValue$1(newVNode, dom, newProps, false);\r\n    }\r\n}\r\nfunction processSelect(vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    applyValue$1(vNode, dom, nextPropsOrEmpty, mounting);\r\n    if (isControlled) {\r\n        dom.vNode = vNode; // TODO: Remove this when implementing Fiber's\r\n        if (mounting) {\r\n            dom.onchange = onSelectChange;\r\n            dom.onchange.wrapped = true;\r\n        }\r\n    }\r\n}\r\nfunction applyValue$1(vNode, dom, nextPropsOrEmpty, mounting) {\r\n    if (nextPropsOrEmpty.multiple !== dom.multiple) {\r\n        dom.multiple = nextPropsOrEmpty.multiple;\r\n    }\r\n    var children = vNode.children;\r\n    if (!isInvalid(children)) {\r\n        var value = nextPropsOrEmpty.value;\r\n        if (mounting && isNullOrUndef(value)) {\r\n            value = nextPropsOrEmpty.defaultValue;\r\n        }\r\n        if (isArray(children)) {\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                updateChildOptionGroup(children[i], value);\r\n            }\r\n        }\r\n        else if (isVNode(children)) {\r\n            updateChildOptionGroup(children, value);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction wrappedOnChange$1(e) {\r\n    var props = this.vNode.props || EMPTY_OBJ;\r\n    var event = props.onChange;\r\n    if (event.event) {\r\n        event.event(event.data, e);\r\n    }\r\n    else {\r\n        event(e);\r\n    }\r\n}\r\nfunction onTextareaInputChange(e) {\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var previousValue = props.value;\r\n    if (props.onInput) {\r\n        var event = props.onInput;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.oninput) {\r\n        props.oninput(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    if (previousValue !== newProps.value) {\r\n        // When this happens we need to store current cursor position and restore it, to avoid jumping\r\n        applyValue$2(newVNode, vNode.dom, false);\r\n    }\r\n}\r\nfunction processTextarea(vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    applyValue$2(nextPropsOrEmpty, dom, mounting);\r\n    if (isControlled) {\r\n        dom.vNode = vNode; // TODO: Remove this when implementing Fiber's\r\n        if (mounting) {\r\n            dom.oninput = onTextareaInputChange;\r\n            dom.oninput.wrapped = true;\r\n            if (nextPropsOrEmpty.onChange) {\r\n                dom.onchange = wrappedOnChange$1;\r\n                dom.onchange.wrapped = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction applyValue$2(nextPropsOrEmpty, dom, mounting) {\r\n    var value = nextPropsOrEmpty.value;\r\n    var domValue = dom.value;\r\n    if (isNullOrUndef(value)) {\r\n        if (mounting) {\r\n            var defaultValue = nextPropsOrEmpty.defaultValue;\r\n            if (!isNullOrUndef(defaultValue)) {\r\n                if (defaultValue !== domValue) {\r\n                    dom.defaultValue = defaultValue;\r\n                    dom.value = defaultValue;\r\n                }\r\n            }\r\n            else if (domValue !== \"\") {\r\n                dom.defaultValue = \"\";\r\n                dom.value = \"\";\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        /* There is value so keep it controlled */\r\n        if (domValue !== value) {\r\n            dom.defaultValue = value;\r\n            dom.value = value;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n/**\r\n * There is currently no support for switching same input between controlled and nonControlled\r\n * If that ever becomes a real issue, then re design controlled elements\r\n * Currently user must choose either controlled or non-controlled and stick with that\r\n */\r\nfunction processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    if (flags & 512 /* InputElement */) {\r\n        processInput(vNode, dom, nextPropsOrEmpty, mounting, isControlled);\r\n    }\r\n    if (flags & 2048 /* SelectElement */) {\r\n        processSelect(vNode, dom, nextPropsOrEmpty, mounting, isControlled);\r\n    }\r\n    if (flags & 1024 /* TextareaElement */) {\r\n        processTextarea(vNode, dom, nextPropsOrEmpty, mounting, isControlled);\r\n    }\r\n}\r\nfunction isControlledFormElement(nextPropsOrEmpty) {\r\n    return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type)\r\n        ? !isNullOrUndef(nextPropsOrEmpty.checked)\r\n        : !isNullOrUndef(nextPropsOrEmpty.value);\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction normalizeChildNodes(parentDom) {\r\n    var dom = parentDom.firstChild;\r\n    while (dom) {\r\n        if (dom.nodeType === 8) {\r\n            if (dom.data === \"!\") {\r\n                var placeholder = document.createTextNode(\"\");\r\n                parentDom.replaceChild(placeholder, dom);\r\n                dom = dom.nextSibling;\r\n            }\r\n            else {\r\n                var lastDom = dom.previousSibling;\r\n                parentDom.removeChild(dom);\r\n                dom = lastDom || parentDom.firstChild;\r\n            }\r\n        }\r\n        else {\r\n            dom = dom.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction hydrateComponent(vNode, dom, lifecycle, context, isSVG, isClass) {\r\n    var type = vNode.type;\r\n    var ref = vNode.ref;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    if (isClass) {\r\n        var _isSVG = dom.namespaceURI === svgNS;\r\n        var instance = createClassComponentInstance(vNode, type, props, context, _isSVG, lifecycle);\r\n        var input = instance._lastInput;\r\n        instance._vNode = vNode;\r\n        hydrate(input, dom, lifecycle, instance._childContext, _isSVG);\r\n        vNode.dom = input.dom;\r\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\r\n        instance._updating = false; // Mount finished allow going sync\r\n        if (options.findDOMNodeEnabled) {\r\n            componentToDOMNodeMap.set(instance, dom);\r\n        }\r\n    }\r\n    else {\r\n        var input$1 = createFunctionalComponentInput(vNode, type, props, context);\r\n        hydrate(input$1, dom, lifecycle, context, isSVG);\r\n        vNode.children = input$1;\r\n        vNode.dom = input$1.dom;\r\n        mountFunctionalComponentCallbacks(props, ref, dom, lifecycle);\r\n    }\r\n    return dom;\r\n}\r\nfunction hydrateElement(vNode, dom, lifecycle, context, isSVG) {\r\n    var children = vNode.children;\r\n    var props = vNode.props;\r\n    var className = vNode.className;\r\n    var flags = vNode.flags;\r\n    var ref = vNode.ref;\r\n    isSVG = isSVG || (flags & 128 /* SvgElement */) > 0;\r\n    if (dom.nodeType !== 1 || dom.tagName.toLowerCase() !== vNode.type) {\r\n        if (false) {\r\n            warning(\"Inferno hydration: Server-side markup doesn't match client-side markup or Initial render target is not empty\");\r\n        }\r\n        var newDom = mountElement(vNode, null, lifecycle, context, isSVG);\r\n        vNode.dom = newDom;\r\n        replaceChild(dom.parentNode, newDom, dom);\r\n        return newDom;\r\n    }\r\n    vNode.dom = dom;\r\n    if (!isInvalid(children)) {\r\n        hydrateChildren(children, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (dom.firstChild !== null && !isSamePropsInnerHTML(dom, props)) {\r\n        dom.textContent = \"\"; // dom has content, but VNode has no children remove everything from DOM\r\n    }\r\n    if (props) {\r\n        var hasControlledValue = false;\r\n        var isFormElement = (flags & 3584 /* FormElement */) > 0;\r\n        if (isFormElement) {\r\n            hasControlledValue = isControlledFormElement(props);\r\n        }\r\n        for (var prop in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\r\n        }\r\n        if (isFormElement) {\r\n            processElement(flags, vNode, dom, props, true, hasControlledValue);\r\n        }\r\n    }\r\n    if (!isNullOrUndef(className)) {\r\n        if (isSVG) {\r\n            dom.setAttribute(\"class\", className);\r\n        }\r\n        else {\r\n            dom.className = className;\r\n        }\r\n    }\r\n    else {\r\n        if (dom.className !== \"\") {\r\n            dom.removeAttribute(\"class\");\r\n        }\r\n    }\r\n    if (ref) {\r\n        mountRef(dom, ref, lifecycle);\r\n    }\r\n    return dom;\r\n}\r\nfunction hydrateChildren(children, parentDom, lifecycle, context, isSVG) {\r\n    normalizeChildNodes(parentDom);\r\n    var dom = parentDom.firstChild;\r\n    if (isStringOrNumber(children)) {\r\n        if (!isNull(dom) && dom.nodeType === 3) {\r\n            if (dom.nodeValue !== children) {\r\n                dom.nodeValue = children;\r\n            }\r\n        }\r\n        else if (children === \"\") {\r\n            parentDom.appendChild(document.createTextNode(\"\"));\r\n        }\r\n        else {\r\n            parentDom.textContent = children;\r\n        }\r\n        if (!isNull(dom)) {\r\n            dom = dom.nextSibling;\r\n        }\r\n    }\r\n    else if (isArray(children)) {\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            if (!isNull(child) && isObject(child)) {\r\n                if (!isNull(dom)) {\r\n                    var nextSibling = dom.nextSibling;\r\n                    hydrate(child, dom, lifecycle, context, isSVG);\r\n                    dom = nextSibling;\r\n                }\r\n                else {\r\n                    mount(child, parentDom, lifecycle, context, isSVG);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // It's VNode\r\n        if (!isNull(dom)) {\r\n            hydrate(children, dom, lifecycle, context, isSVG);\r\n            dom = dom.nextSibling;\r\n        }\r\n        else {\r\n            mount(children, parentDom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    // clear any other DOM nodes, there should be only a single entry for the root\r\n    while (dom) {\r\n        var nextSibling$1 = dom.nextSibling;\r\n        parentDom.removeChild(dom);\r\n        dom = nextSibling$1;\r\n    }\r\n}\r\nfunction hydrateText(vNode, dom) {\r\n    if (dom.nodeType !== 3) {\r\n        var newDom = mountText(vNode, null);\r\n        vNode.dom = newDom;\r\n        replaceChild(dom.parentNode, newDom, dom);\r\n        return newDom;\r\n    }\r\n    var text = vNode.children;\r\n    if (dom.nodeValue !== text) {\r\n        dom.nodeValue = text;\r\n    }\r\n    vNode.dom = dom;\r\n    return dom;\r\n}\r\nfunction hydrateVoid(vNode, dom) {\r\n    vNode.dom = dom;\r\n    return dom;\r\n}\r\nfunction hydrate(vNode, dom, lifecycle, context, isSVG) {\r\n    var flags = vNode.flags;\r\n    if (flags & 28 /* Component */) {\r\n        hydrateComponent(vNode, dom, lifecycle, context, isSVG, (flags & 4 /* ComponentClass */) > 0);\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        hydrateElement(vNode, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        hydrateText(vNode, dom);\r\n    }\r\n    else if (flags & 4096 /* Void */) {\r\n        hydrateVoid(vNode, dom);\r\n    }\r\n    else {\r\n        if (false) {\r\n            throwError((\"hydrate() expects a valid VNode, instead it received an object with the type \\\"\" + (typeof vNode) + \"\\\".\"));\r\n        }\r\n        throwError();\r\n    }\r\n}\r\nfunction hydrateRoot(input, parentDom, lifecycle) {\r\n    if (!isNull(parentDom)) {\r\n        var dom = parentDom.firstChild;\r\n        if (!isNull(dom)) {\r\n            hydrate(input, dom, lifecycle, EMPTY_OBJ, false);\r\n            dom = parentDom.firstChild;\r\n            // clear any other DOM nodes, there should be only a single entry for the root\r\n            while ((dom = dom.nextSibling)) {\r\n                parentDom.removeChild(dom);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar componentPools = new Map();\r\nvar elementPools = new Map();\r\nfunction recycleElement(vNode, lifecycle, context, isSVG) {\r\n    var tag = vNode.type;\r\n    var pools = elementPools.get(tag);\r\n    if (!isUndefined(pools)) {\r\n        var key = vNode.key;\r\n        var pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\r\n        if (!isUndefined(pool)) {\r\n            var recycledVNode = pool.pop();\r\n            if (!isUndefined(recycledVNode)) {\r\n                patchElement(recycledVNode, vNode, null, lifecycle, context, isSVG, true);\r\n                return vNode.dom;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction poolElement(vNode) {\r\n    var tag = vNode.type;\r\n    var key = vNode.key;\r\n    var pools = elementPools.get(tag);\r\n    if (isUndefined(pools)) {\r\n        pools = {\r\n            keyed: new Map(),\r\n            nonKeyed: []\r\n        };\r\n        elementPools.set(tag, pools);\r\n    }\r\n    if (isNull(key)) {\r\n        pools.nonKeyed.push(vNode);\r\n    }\r\n    else {\r\n        var pool = pools.keyed.get(key);\r\n        if (isUndefined(pool)) {\r\n            pool = [];\r\n            pools.keyed.set(key, pool);\r\n        }\r\n        pool.push(vNode);\r\n    }\r\n}\r\nfunction recycleComponent(vNode, lifecycle, context, isSVG) {\r\n    var type = vNode.type;\r\n    var pools = componentPools.get(type);\r\n    if (!isUndefined(pools)) {\r\n        var key = vNode.key;\r\n        var pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\r\n        if (!isUndefined(pool)) {\r\n            var recycledVNode = pool.pop();\r\n            if (!isUndefined(recycledVNode)) {\r\n                var flags = vNode.flags;\r\n                var failed = patchComponent(recycledVNode, vNode, null, lifecycle, context, isSVG, (flags & 4 /* ComponentClass */) > 0, true);\r\n                if (!failed) {\r\n                    return vNode.dom;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction poolComponent(vNode) {\r\n    var hooks = vNode.ref;\r\n    var nonRecycleHooks = hooks &&\r\n        (hooks.onComponentWillMount ||\r\n            hooks.onComponentWillUnmount ||\r\n            hooks.onComponentDidMount ||\r\n            hooks.onComponentWillUpdate ||\r\n            hooks.onComponentDidUpdate);\r\n    if (nonRecycleHooks) {\r\n        return;\r\n    }\r\n    var type = vNode.type;\r\n    var key = vNode.key;\r\n    var pools = componentPools.get(type);\r\n    if (isUndefined(pools)) {\r\n        pools = {\r\n            keyed: new Map(),\r\n            nonKeyed: []\r\n        };\r\n        componentPools.set(type, pools);\r\n    }\r\n    if (isNull(key)) {\r\n        pools.nonKeyed.push(vNode);\r\n    }\r\n    else {\r\n        var pool = pools.keyed.get(key);\r\n        if (isUndefined(pool)) {\r\n            pool = [];\r\n            pools.keyed.set(key, pool);\r\n        }\r\n        pool.push(vNode);\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction unmount(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var flags = vNode.flags;\r\n    if (flags & 28 /* Component */) {\r\n        unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling);\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling);\r\n    }\r\n    else if (flags & (1 /* Text */ | 4096 /* Void */)) {\r\n        unmountVoidOrText(vNode, parentDom);\r\n    }\r\n}\r\nfunction unmountVoidOrText(vNode, parentDom) {\r\n    if (!isNull(parentDom)) {\r\n        removeChild(parentDom, vNode.dom);\r\n    }\r\n}\r\nfunction unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var instance = vNode.children;\r\n    var flags = vNode.flags;\r\n    var isStatefulComponent$$1 = flags & 4;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var ref = vNode.ref;\r\n    var dom = vNode.dom;\r\n    if (!isRecycling) {\r\n        if (isStatefulComponent$$1) {\r\n            if (!instance._unmounted) {\r\n                if (!isNull(options.beforeUnmount)) {\r\n                    options.beforeUnmount(vNode);\r\n                }\r\n                if (!isUndefined(instance.componentWillUnmount)) {\r\n                    instance.componentWillUnmount();\r\n                }\r\n                if (ref && !isRecycling) {\r\n                    ref(null);\r\n                }\r\n                instance._unmounted = true;\r\n                if (options.findDOMNodeEnabled) {\r\n                    componentToDOMNodeMap.delete(instance);\r\n                }\r\n                unmount(instance._lastInput, null, instance._lifecycle, false, isRecycling);\r\n            }\r\n        }\r\n        else {\r\n            if (!isNullOrUndef(ref)) {\r\n                if (!isNullOrUndef(ref.onComponentWillUnmount)) {\r\n                    ref.onComponentWillUnmount(dom, props);\r\n                }\r\n            }\r\n            unmount(instance, null, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n    if (parentDom) {\r\n        removeChild(parentDom, dom);\r\n    }\r\n    if (options.recyclingEnabled &&\r\n        !isStatefulComponent$$1 &&\r\n        (parentDom || canRecycle)) {\r\n        poolComponent(vNode);\r\n    }\r\n}\r\nfunction unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var dom = vNode.dom;\r\n    var ref = vNode.ref;\r\n    var props = vNode.props;\r\n    if (ref && !isRecycling) {\r\n        unmountRef(ref);\r\n    }\r\n    var children = vNode.children;\r\n    if (!isNullOrUndef(children)) {\r\n        unmountChildren$1(children, lifecycle, isRecycling);\r\n    }\r\n    if (!isNull(props)) {\r\n        for (var name in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            if (props[name] !== null && isAttrAnEvent(name)) {\r\n                patchEvent(name, props[name], null, dom);\r\n                // We need to set this null, because same props otherwise come back if SCU returns false and we are recyling\r\n                props[name] = null;\r\n            }\r\n        }\r\n    }\r\n    if (!isNull(parentDom)) {\r\n        removeChild(parentDom, dom);\r\n    }\r\n    if (options.recyclingEnabled && (parentDom || canRecycle)) {\r\n        poolElement(vNode);\r\n    }\r\n}\r\nfunction unmountChildren$1(children, lifecycle, isRecycling) {\r\n    if (isArray(children)) {\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            if (!isInvalid(child) && isObject(child)) {\r\n                unmount(child, null, lifecycle, false, isRecycling);\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(children)) {\r\n        unmount(children, null, lifecycle, false, isRecycling);\r\n    }\r\n}\r\nfunction unmountRef(ref) {\r\n    if (isFunction(ref)) {\r\n        ref(null);\r\n    }\r\n    else {\r\n        if (isInvalid(ref)) {\r\n            return;\r\n        }\r\n        if (false) {\r\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n        }\r\n        throwError();\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n// rather than use a Map, like we did before, we can use an array here\r\n// given there shouldn't be THAT many roots on the page, the difference\r\n// in performance is huge: https://esbench.com/bench/5802a691330ab09900a1a2da\r\nvar componentToDOMNodeMap = new Map();\r\nvar roots = options.roots;\r\n/**\r\n * When inferno.options.findDOMNOdeEnabled is true, this function will return DOM Node by component instance\r\n * @param ref Component instance\r\n * @returns {*|null} returns dom node\r\n */\r\nfunction findDOMNode(ref) {\r\n    if (!options.findDOMNodeEnabled) {\r\n        if (false) {\r\n            throwError(\"findDOMNode() has been disabled, use Inferno.options.findDOMNodeEnabled = true; enabled findDOMNode(). Warning this can significantly impact performance!\");\r\n        }\r\n        throwError();\r\n    }\r\n    var dom = ref && ref.nodeType ? ref : null;\r\n    return componentToDOMNodeMap.get(ref) || dom;\r\n}\r\nfunction getRoot(dom) {\r\n    for (var i = 0, len = roots.length; i < len; i++) {\r\n        var root = roots[i];\r\n        if (root.dom === dom) {\r\n            return root;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction setRoot(dom, input, lifecycle) {\r\n    var root = {\r\n        dom: dom,\r\n        input: input,\r\n        lifecycle: lifecycle\r\n    };\r\n    roots.push(root);\r\n    return root;\r\n}\r\nfunction removeRoot(root) {\r\n    for (var i = 0, len = roots.length; i < len; i++) {\r\n        if (roots[i] === root) {\r\n            roots.splice(i, 1);\r\n            return;\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    if (isBrowser && document.body === null) {\r\n        warning('Inferno warning: you cannot initialize inferno without \"document.body\". Wait on \"DOMContentLoaded\" event, add script to bottom of body, or use async/defer attributes on script tag.');\r\n    }\r\n}\r\nvar documentBody = isBrowser ? document.body : null;\r\n/**\r\n * Renders virtual node tree into parent node.\r\n * @param {VNode | null | string | number} input vNode to be rendered\r\n * @param parentDom DOM node which content will be replaced by virtual node\r\n * @returns {InfernoChildren} rendered virtual node\r\n */\r\nfunction render(input, parentDom) {\r\n    if (documentBody === parentDom) {\r\n        if (false) {\r\n            throwError('you cannot render() to the \"document.body\". Use an empty element as a container instead.');\r\n        }\r\n        throwError();\r\n    }\r\n    if (input === NO_OP) {\r\n        return;\r\n    }\r\n    var root = getRoot(parentDom);\r\n    if (isNull(root)) {\r\n        var lifecycle = new Lifecycle();\r\n        if (!isInvalid(input)) {\r\n            if (input.dom) {\r\n                input = directClone(input);\r\n            }\r\n            if (!hydrateRoot(input, parentDom, lifecycle)) {\r\n                mount(input, parentDom, lifecycle, EMPTY_OBJ, false);\r\n            }\r\n            root = setRoot(parentDom, input, lifecycle);\r\n            lifecycle.trigger();\r\n        }\r\n    }\r\n    else {\r\n        var lifecycle$1 = root.lifecycle;\r\n        lifecycle$1.listeners = [];\r\n        if (isNullOrUndef(input)) {\r\n            unmount(root.input, parentDom, lifecycle$1, false, false);\r\n            removeRoot(root);\r\n        }\r\n        else {\r\n            if (input.dom) {\r\n                input = directClone(input);\r\n            }\r\n            patch(root.input, input, parentDom, lifecycle$1, EMPTY_OBJ, false, false);\r\n        }\r\n        root.input = input;\r\n        lifecycle$1.trigger();\r\n    }\r\n    if (root) {\r\n        var rootInput = root.input;\r\n        if (rootInput && rootInput.flags & 28 /* Component */) {\r\n            return rootInput.children;\r\n        }\r\n    }\r\n}\r\nfunction createRenderer(parentDom) {\r\n    return function renderer(lastInput, nextInput) {\r\n        if (!parentDom) {\r\n            parentDom = lastInput;\r\n        }\r\n        render(nextInput, parentDom);\r\n    };\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction patch(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    if (lastVNode !== nextVNode) {\r\n        var lastFlags = lastVNode.flags;\r\n        var nextFlags = nextVNode.flags;\r\n        if (nextFlags & 28 /* Component */) {\r\n            var isClass = (nextFlags & 4 /* ComponentClass */) > 0;\r\n            if (lastFlags & 28 /* Component */) {\r\n                patchComponent(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isClass, isRecycling);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountComponent(nextVNode, null, lifecycle, context, isSVG, isClass), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 3970 /* Element */) {\r\n            if (lastFlags & 3970 /* Element */) {\r\n                patchElement(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountElement(nextVNode, null, lifecycle, context, isSVG), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 1 /* Text */) {\r\n            if (lastFlags & 1 /* Text */) {\r\n                patchText(lastVNode, nextVNode);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountText(nextVNode, null), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 4096 /* Void */) {\r\n            if (lastFlags & 4096 /* Void */) {\r\n                patchVoid(lastVNode, nextVNode);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountVoid(nextVNode, null), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else {\r\n            // Error case: mount new one replacing old one\r\n            replaceLastChildAndUnmount(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction unmountChildren(children, dom, lifecycle, isRecycling) {\r\n    if (isVNode(children)) {\r\n        unmount(children, dom, lifecycle, true, isRecycling);\r\n    }\r\n    else if (isArray(children)) {\r\n        removeAllChildren(dom, children, lifecycle, isRecycling);\r\n    }\r\n    else {\r\n        dom.textContent = \"\";\r\n    }\r\n}\r\nfunction patchElement(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    var nextTag = nextVNode.type;\r\n    var lastTag = lastVNode.type;\r\n    if (lastTag !== nextTag) {\r\n        replaceWithNewNode(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n    }\r\n    else {\r\n        var dom = lastVNode.dom;\r\n        var lastProps = lastVNode.props;\r\n        var nextProps = nextVNode.props;\r\n        var lastChildren = lastVNode.children;\r\n        var nextChildren = nextVNode.children;\r\n        var lastFlags = lastVNode.flags;\r\n        var nextFlags = nextVNode.flags;\r\n        var nextRef = nextVNode.ref;\r\n        var lastClassName = lastVNode.className;\r\n        var nextClassName = nextVNode.className;\r\n        nextVNode.dom = dom;\r\n        isSVG = isSVG || (nextFlags & 128 /* SvgElement */) > 0;\r\n        if (lastChildren !== nextChildren) {\r\n            var childrenIsSVG = isSVG === true && nextVNode.type !== \"foreignObject\";\r\n            patchChildren(lastFlags, nextFlags, lastChildren, nextChildren, dom, lifecycle, context, childrenIsSVG, isRecycling);\r\n        }\r\n        // inlined patchProps  -- starts --\r\n        if (lastProps !== nextProps) {\r\n            var lastPropsOrEmpty = lastProps || EMPTY_OBJ;\r\n            var nextPropsOrEmpty = nextProps || EMPTY_OBJ;\r\n            var hasControlledValue = false;\r\n            if (nextPropsOrEmpty !== EMPTY_OBJ) {\r\n                var isFormElement = (nextFlags & 3584 /* FormElement */) > 0;\r\n                if (isFormElement) {\r\n                    hasControlledValue = isControlledFormElement(nextPropsOrEmpty);\r\n                }\r\n                for (var prop in nextPropsOrEmpty) {\r\n                    // do not add a hasOwnProperty check here, it affects performance\r\n                    var nextValue = nextPropsOrEmpty[prop];\r\n                    var lastValue = lastPropsOrEmpty[prop];\r\n                    patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue);\r\n                }\r\n                if (isFormElement) {\r\n                    // When inferno is recycling form element, we need to process it like it would be mounting\r\n                    processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, isRecycling, hasControlledValue);\r\n                }\r\n            }\r\n            if (lastPropsOrEmpty !== EMPTY_OBJ) {\r\n                for (var prop$1 in lastPropsOrEmpty) {\r\n                    // do not add a hasOwnProperty check here, it affects performance\r\n                    if (isNullOrUndef(nextPropsOrEmpty[prop$1]) &&\r\n                        !isNullOrUndef(lastPropsOrEmpty[prop$1])) {\r\n                        removeProp(prop$1, lastPropsOrEmpty[prop$1], dom, nextFlags);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // inlined patchProps  -- ends --\r\n        if (lastClassName !== nextClassName) {\r\n            if (isNullOrUndef(nextClassName)) {\r\n                dom.removeAttribute(\"class\");\r\n            }\r\n            else {\r\n                if (isSVG) {\r\n                    dom.setAttribute(\"class\", nextClassName);\r\n                }\r\n                else {\r\n                    dom.className = nextClassName;\r\n                }\r\n            }\r\n        }\r\n        if (nextRef) {\r\n            if (lastVNode.ref !== nextRef || isRecycling) {\r\n                mountRef(dom, nextRef, lifecycle);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchChildren(lastFlags, nextFlags, lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var patchArray = false;\r\n    var patchKeyed = false;\r\n    if (nextFlags & 64 /* HasNonKeyedChildren */) {\r\n        patchArray = true;\r\n    }\r\n    else if ((lastFlags & 32 /* HasKeyedChildren */) > 0 &&\r\n        (nextFlags & 32 /* HasKeyedChildren */) > 0) {\r\n        patchKeyed = true;\r\n        patchArray = true;\r\n    }\r\n    else if (isInvalid(nextChildren)) {\r\n        unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n    }\r\n    else if (isInvalid(lastChildren)) {\r\n        if (isStringOrNumber(nextChildren)) {\r\n            setTextContent(dom, nextChildren);\r\n        }\r\n        else {\r\n            if (isArray(nextChildren)) {\r\n                mountArrayChildren(nextChildren, dom, lifecycle, context, isSVG);\r\n            }\r\n            else {\r\n                mount(nextChildren, dom, lifecycle, context, isSVG);\r\n            }\r\n        }\r\n    }\r\n    else if (isStringOrNumber(nextChildren)) {\r\n        if (isStringOrNumber(lastChildren)) {\r\n            updateTextContent(dom, nextChildren);\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            setTextContent(dom, nextChildren);\r\n        }\r\n    }\r\n    else if (isArray(nextChildren)) {\r\n        if (isArray(lastChildren)) {\r\n            patchArray = true;\r\n            if (isKeyed(lastChildren, nextChildren)) {\r\n                patchKeyed = true;\r\n            }\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            mountArrayChildren(nextChildren, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    else if (isArray(lastChildren)) {\r\n        removeAllChildren(dom, lastChildren, lifecycle, isRecycling);\r\n        mount(nextChildren, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (isVNode(nextChildren)) {\r\n        if (isVNode(lastChildren)) {\r\n            patch(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            mount(nextChildren, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    if (patchArray) {\r\n        if (patchKeyed) {\r\n            patchKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        else {\r\n            patchNonKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction patchComponent(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isClass, isRecycling) {\r\n    var lastType = lastVNode.type;\r\n    var nextType = nextVNode.type;\r\n    var lastKey = lastVNode.key;\r\n    var nextKey = nextVNode.key;\r\n    if (lastType !== nextType || lastKey !== nextKey) {\r\n        replaceWithNewNode(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n        return false;\r\n    }\r\n    else {\r\n        var nextProps = nextVNode.props || EMPTY_OBJ;\r\n        if (isClass) {\r\n            var instance = lastVNode.children;\r\n            instance._updating = true;\r\n            if (instance._unmounted) {\r\n                if (isNull(parentDom)) {\r\n                    return true;\r\n                }\r\n                replaceChild(parentDom, mountComponent(nextVNode, null, lifecycle, context, isSVG, (nextVNode.flags & 4 /* ComponentClass */) > 0), lastVNode.dom);\r\n            }\r\n            else {\r\n                var hasComponentDidUpdate = !isUndefined(instance.componentDidUpdate);\r\n                var nextState = instance.state;\r\n                // When component has componentDidUpdate hook, we need to clone lastState or will be modified by reference during update\r\n                var lastState = hasComponentDidUpdate\r\n                    ? combineFrom(nextState, null)\r\n                    : nextState;\r\n                var lastProps = instance.props;\r\n                nextVNode.children = instance;\r\n                instance._isSVG = isSVG;\r\n                var lastInput = instance._lastInput;\r\n                var nextInput = instance._updateComponent(lastState, nextState, lastProps, nextProps, context, false, false);\r\n                var didUpdate = true;\r\n                // Update component before getting child context\r\n                var childContext;\r\n                if (!isNullOrUndef(instance.getChildContext)) {\r\n                    childContext = instance.getChildContext();\r\n                }\r\n                if (isNullOrUndef(childContext)) {\r\n                    childContext = context;\r\n                }\r\n                else {\r\n                    childContext = combineFrom(context, childContext);\r\n                }\r\n                instance._childContext = childContext;\r\n                if (isInvalid(nextInput)) {\r\n                    nextInput = createVoidVNode();\r\n                }\r\n                else if (nextInput === NO_OP) {\r\n                    nextInput = lastInput;\r\n                    didUpdate = false;\r\n                }\r\n                else if (isStringOrNumber(nextInput)) {\r\n                    nextInput = createTextVNode(nextInput, null);\r\n                }\r\n                else if (isArray(nextInput)) {\r\n                    if (false) {\r\n                        throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n                    }\r\n                    throwError();\r\n                }\r\n                else if (isObject(nextInput)) {\r\n                    if (!isNull(nextInput.dom)) {\r\n                        nextInput = directClone(nextInput);\r\n                    }\r\n                }\r\n                if (nextInput.flags & 28 /* Component */) {\r\n                    nextInput.parentVNode = nextVNode;\r\n                }\r\n                else if (lastInput.flags & 28 /* Component */) {\r\n                    lastInput.parentVNode = nextVNode;\r\n                }\r\n                instance._lastInput = nextInput;\r\n                instance._vNode = nextVNode;\r\n                if (didUpdate) {\r\n                    patch(lastInput, nextInput, parentDom, lifecycle, childContext, isSVG, isRecycling);\r\n                    if (hasComponentDidUpdate && instance.componentDidUpdate) {\r\n                        instance.componentDidUpdate(lastProps, lastState);\r\n                    }\r\n                    if (!isNull(options.afterUpdate)) {\r\n                        options.afterUpdate(nextVNode);\r\n                    }\r\n                    if (options.findDOMNodeEnabled) {\r\n                        componentToDOMNodeMap.set(instance, nextInput.dom);\r\n                    }\r\n                }\r\n                nextVNode.dom = nextInput.dom;\r\n            }\r\n            instance._updating = false;\r\n        }\r\n        else {\r\n            var shouldUpdate = true;\r\n            var lastProps$1 = lastVNode.props;\r\n            var nextHooks = nextVNode.ref;\r\n            var nextHooksDefined = !isNullOrUndef(nextHooks);\r\n            var lastInput$1 = lastVNode.children;\r\n            var nextInput$1 = lastInput$1;\r\n            nextVNode.dom = lastVNode.dom;\r\n            nextVNode.children = lastInput$1;\r\n            if (lastKey !== nextKey) {\r\n                shouldUpdate = true;\r\n            }\r\n            else {\r\n                if (nextHooksDefined &&\r\n                    !isNullOrUndef(nextHooks.onComponentShouldUpdate)) {\r\n                    shouldUpdate = nextHooks.onComponentShouldUpdate(lastProps$1, nextProps);\r\n                }\r\n            }\r\n            if (shouldUpdate !== false) {\r\n                if (nextHooksDefined &&\r\n                    !isNullOrUndef(nextHooks.onComponentWillUpdate)) {\r\n                    nextHooks.onComponentWillUpdate(lastProps$1, nextProps);\r\n                }\r\n                nextInput$1 = nextType(nextProps, context);\r\n                if (isInvalid(nextInput$1)) {\r\n                    nextInput$1 = createVoidVNode();\r\n                }\r\n                else if (isStringOrNumber(nextInput$1) && nextInput$1 !== NO_OP) {\r\n                    nextInput$1 = createTextVNode(nextInput$1, null);\r\n                }\r\n                else if (isArray(nextInput$1)) {\r\n                    if (false) {\r\n                        throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n                    }\r\n                    throwError();\r\n                }\r\n                else if (isObject(nextInput$1)) {\r\n                    if (!isNull(nextInput$1.dom)) {\r\n                        nextInput$1 = directClone(nextInput$1);\r\n                    }\r\n                }\r\n                if (nextInput$1 !== NO_OP) {\r\n                    patch(lastInput$1, nextInput$1, parentDom, lifecycle, context, isSVG, isRecycling);\r\n                    nextVNode.children = nextInput$1;\r\n                    if (nextHooksDefined &&\r\n                        !isNullOrUndef(nextHooks.onComponentDidUpdate)) {\r\n                        nextHooks.onComponentDidUpdate(lastProps$1, nextProps);\r\n                    }\r\n                    nextVNode.dom = nextInput$1.dom;\r\n                }\r\n            }\r\n            if (nextInput$1.flags & 28 /* Component */) {\r\n                nextInput$1.parentVNode = nextVNode;\r\n            }\r\n            else if (lastInput$1.flags & 28 /* Component */) {\r\n                lastInput$1.parentVNode = nextVNode;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction patchText(lastVNode, nextVNode) {\r\n    var nextText = nextVNode.children;\r\n    var dom = lastVNode.dom;\r\n    nextVNode.dom = dom;\r\n    if (lastVNode.children !== nextText) {\r\n        dom.nodeValue = nextText;\r\n    }\r\n}\r\nfunction patchVoid(lastVNode, nextVNode) {\r\n    nextVNode.dom = lastVNode.dom;\r\n}\r\nfunction patchNonKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var lastChildrenLength = lastChildren.length;\r\n    var nextChildrenLength = nextChildren.length;\r\n    var commonLength = lastChildrenLength > nextChildrenLength\r\n        ? nextChildrenLength\r\n        : lastChildrenLength;\r\n    var i = 0;\r\n    for (; i < commonLength; i++) {\r\n        var nextChild = nextChildren[i];\r\n        if (nextChild.dom) {\r\n            nextChild = nextChildren[i] = directClone(nextChild);\r\n        }\r\n        patch(lastChildren[i], nextChild, dom, lifecycle, context, isSVG, isRecycling);\r\n    }\r\n    if (lastChildrenLength < nextChildrenLength) {\r\n        for (i = commonLength; i < nextChildrenLength; i++) {\r\n            var nextChild$1 = nextChildren[i];\r\n            if (nextChild$1.dom) {\r\n                nextChild$1 = nextChildren[i] = directClone(nextChild$1);\r\n            }\r\n            appendChild(dom, mount(nextChild$1, null, lifecycle, context, isSVG));\r\n        }\r\n    }\r\n    else if (nextChildrenLength === 0) {\r\n        removeAllChildren(dom, lastChildren, lifecycle, isRecycling);\r\n    }\r\n    else if (lastChildrenLength > nextChildrenLength) {\r\n        for (i = commonLength; i < lastChildrenLength; i++) {\r\n            unmount(lastChildren[i], dom, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction patchKeyedChildren(a, b, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var aLength = a.length;\r\n    var bLength = b.length;\r\n    var aEnd = aLength - 1;\r\n    var bEnd = bLength - 1;\r\n    var aStart = 0;\r\n    var bStart = 0;\r\n    var i;\r\n    var j;\r\n    var aNode;\r\n    var bNode;\r\n    var nextNode;\r\n    var nextPos;\r\n    var node;\r\n    if (aLength === 0) {\r\n        if (bLength > 0) {\r\n            mountArrayChildren(b, dom, lifecycle, context, isSVG);\r\n        }\r\n        return;\r\n    }\r\n    else if (bLength === 0) {\r\n        removeAllChildren(dom, a, lifecycle, isRecycling);\r\n        return;\r\n    }\r\n    var aStartNode = a[aStart];\r\n    var bStartNode = b[bStart];\r\n    var aEndNode = a[aEnd];\r\n    var bEndNode = b[bEnd];\r\n    if (bStartNode.dom) {\r\n        b[bStart] = bStartNode = directClone(bStartNode);\r\n    }\r\n    if (bEndNode.dom) {\r\n        b[bEnd] = bEndNode = directClone(bEndNode);\r\n    }\r\n    // Step 1\r\n    /* eslint no-constant-condition: 0 */\r\n    outer: while (true) {\r\n        // Sync nodes with the same key at the beginning.\r\n        while (aStartNode.key === bStartNode.key) {\r\n            patch(aStartNode, bStartNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            aStart++;\r\n            bStart++;\r\n            if (aStart > aEnd || bStart > bEnd) {\r\n                break outer;\r\n            }\r\n            aStartNode = a[aStart];\r\n            bStartNode = b[bStart];\r\n            if (bStartNode.dom) {\r\n                b[bStart] = bStartNode = directClone(bStartNode);\r\n            }\r\n        }\r\n        // Sync nodes with the same key at the end.\r\n        while (aEndNode.key === bEndNode.key) {\r\n            patch(aEndNode, bEndNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            aEnd--;\r\n            bEnd--;\r\n            if (aStart > aEnd || bStart > bEnd) {\r\n                break outer;\r\n            }\r\n            aEndNode = a[aEnd];\r\n            bEndNode = b[bEnd];\r\n            if (bEndNode.dom) {\r\n                b[bEnd] = bEndNode = directClone(bEndNode);\r\n            }\r\n        }\r\n        // Move and sync nodes from right to left.\r\n        if (aEndNode.key === bStartNode.key) {\r\n            patch(aEndNode, bStartNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            insertOrAppend(dom, bStartNode.dom, aStartNode.dom);\r\n            aEnd--;\r\n            bStart++;\r\n            aEndNode = a[aEnd];\r\n            bStartNode = b[bStart];\r\n            if (bStartNode.dom) {\r\n                b[bStart] = bStartNode = directClone(bStartNode);\r\n            }\r\n            continue;\r\n        }\r\n        // Move and sync nodes from left to right.\r\n        if (aStartNode.key === bEndNode.key) {\r\n            patch(aStartNode, bEndNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            nextPos = bEnd + 1;\r\n            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n            insertOrAppend(dom, bEndNode.dom, nextNode);\r\n            aStart++;\r\n            bEnd--;\r\n            aStartNode = a[aStart];\r\n            bEndNode = b[bEnd];\r\n            if (bEndNode.dom) {\r\n                b[bEnd] = bEndNode = directClone(bEndNode);\r\n            }\r\n            continue;\r\n        }\r\n        break;\r\n    }\r\n    if (aStart > aEnd) {\r\n        if (bStart <= bEnd) {\r\n            nextPos = bEnd + 1;\r\n            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n            while (bStart <= bEnd) {\r\n                node = b[bStart];\r\n                if (node.dom) {\r\n                    b[bStart] = node = directClone(node);\r\n                }\r\n                bStart++;\r\n                insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n            }\r\n        }\r\n    }\r\n    else if (bStart > bEnd) {\r\n        while (aStart <= aEnd) {\r\n            unmount(a[aStart++], dom, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n    else {\r\n        aLength = aEnd - aStart + 1;\r\n        bLength = bEnd - bStart + 1;\r\n        var sources = new Array(bLength);\r\n        // Mark all nodes as inserted.\r\n        for (i = 0; i < bLength; i++) {\r\n            sources[i] = -1;\r\n        }\r\n        var moved = false;\r\n        var pos = 0;\r\n        var patched = 0;\r\n        // When sizes are small, just loop them through\r\n        if (bLength <= 4 || aLength * bLength <= 16) {\r\n            for (i = aStart; i <= aEnd; i++) {\r\n                aNode = a[i];\r\n                if (patched < bLength) {\r\n                    for (j = bStart; j <= bEnd; j++) {\r\n                        bNode = b[j];\r\n                        if (aNode.key === bNode.key) {\r\n                            sources[j - bStart] = i;\r\n                            if (pos > j) {\r\n                                moved = true;\r\n                            }\r\n                            else {\r\n                                pos = j;\r\n                            }\r\n                            if (bNode.dom) {\r\n                                b[j] = bNode = directClone(bNode);\r\n                            }\r\n                            patch(aNode, bNode, dom, lifecycle, context, isSVG, isRecycling);\r\n                            patched++;\r\n                            a[i] = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var keyIndex = new Map();\r\n            // Map keys by their index in array\r\n            for (i = bStart; i <= bEnd; i++) {\r\n                keyIndex.set(b[i].key, i);\r\n            }\r\n            // Try to patch same keys\r\n            for (i = aStart; i <= aEnd; i++) {\r\n                aNode = a[i];\r\n                if (patched < bLength) {\r\n                    j = keyIndex.get(aNode.key);\r\n                    if (!isUndefined(j)) {\r\n                        bNode = b[j];\r\n                        sources[j - bStart] = i;\r\n                        if (pos > j) {\r\n                            moved = true;\r\n                        }\r\n                        else {\r\n                            pos = j;\r\n                        }\r\n                        if (bNode.dom) {\r\n                            b[j] = bNode = directClone(bNode);\r\n                        }\r\n                        patch(aNode, bNode, dom, lifecycle, context, isSVG, isRecycling);\r\n                        patched++;\r\n                        a[i] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // fast-path: if nothing patched remove all old and add all new\r\n        if (aLength === a.length && patched === 0) {\r\n            removeAllChildren(dom, a, lifecycle, isRecycling);\r\n            while (bStart < bLength) {\r\n                node = b[bStart];\r\n                if (node.dom) {\r\n                    b[bStart] = node = directClone(node);\r\n                }\r\n                bStart++;\r\n                insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), null);\r\n            }\r\n        }\r\n        else {\r\n            i = aLength - patched;\r\n            while (i > 0) {\r\n                aNode = a[aStart++];\r\n                if (!isNull(aNode)) {\r\n                    unmount(aNode, dom, lifecycle, true, isRecycling);\r\n                    i--;\r\n                }\r\n            }\r\n            if (moved) {\r\n                var seq = lis_algorithm(sources);\r\n                j = seq.length - 1;\r\n                for (i = bLength - 1; i >= 0; i--) {\r\n                    if (sources[i] === -1) {\r\n                        pos = i + bStart;\r\n                        node = b[pos];\r\n                        if (node.dom) {\r\n                            b[pos] = node = directClone(node);\r\n                        }\r\n                        nextPos = pos + 1;\r\n                        nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                        insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n                    }\r\n                    else {\r\n                        if (j < 0 || i !== seq[j]) {\r\n                            pos = i + bStart;\r\n                            node = b[pos];\r\n                            nextPos = pos + 1;\r\n                            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                            insertOrAppend(dom, node.dom, nextNode);\r\n                        }\r\n                        else {\r\n                            j--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (patched !== bLength) {\r\n                // when patched count doesn't match b length we need to insert those new ones\r\n                // loop backwards so we can use insertBefore\r\n                for (i = bLength - 1; i >= 0; i--) {\r\n                    if (sources[i] === -1) {\r\n                        pos = i + bStart;\r\n                        node = b[pos];\r\n                        if (node.dom) {\r\n                            b[pos] = node = directClone(node);\r\n                        }\r\n                        nextPos = pos + 1;\r\n                        nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                        insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// // https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction lis_algorithm(arr) {\r\n    var p = arr.slice(0);\r\n    var result = [0];\r\n    var i;\r\n    var j;\r\n    var u;\r\n    var v;\r\n    var c;\r\n    var len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        var arrI = arr[i];\r\n        if (arrI === -1) {\r\n            continue;\r\n        }\r\n        j = result[result.length - 1];\r\n        if (arr[j] < arrI) {\r\n            p[i] = j;\r\n            result.push(i);\r\n            continue;\r\n        }\r\n        u = 0;\r\n        v = result.length - 1;\r\n        while (u < v) {\r\n            c = ((u + v) / 2) | 0;\r\n            if (arr[result[c]] < arrI) {\r\n                u = c + 1;\r\n            }\r\n            else {\r\n                v = c;\r\n            }\r\n        }\r\n        if (arrI < arr[result[u]]) {\r\n            if (u > 0) {\r\n                p[i] = result[u - 1];\r\n            }\r\n            result[u] = i;\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\r\nfunction isAttrAnEvent(attr) {\r\n    return attr[0] === \"o\" && attr[1] === \"n\";\r\n}\r\nfunction patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue) {\r\n    if (lastValue !== nextValue) {\r\n        if (skipProps.has(prop) || (hasControlledValue && prop === \"value\")) {\r\n            return;\r\n        }\r\n        else if (booleanProps.has(prop)) {\r\n            prop = prop === \"autoFocus\" ? prop.toLowerCase() : prop;\r\n            dom[prop] = !!nextValue;\r\n        }\r\n        else if (strictProps.has(prop)) {\r\n            var value = isNullOrUndef(nextValue) ? \"\" : nextValue;\r\n            if (dom[prop] !== value) {\r\n                dom[prop] = value;\r\n            }\r\n        }\r\n        else if (isAttrAnEvent(prop)) {\r\n            patchEvent(prop, lastValue, nextValue, dom);\r\n        }\r\n        else if (isNullOrUndef(nextValue)) {\r\n            dom.removeAttribute(prop);\r\n        }\r\n        else if (prop === \"style\") {\r\n            patchStyle(lastValue, nextValue, dom);\r\n        }\r\n        else if (prop === \"dangerouslySetInnerHTML\") {\r\n            var lastHtml = lastValue && lastValue.__html;\r\n            var nextHtml = nextValue && nextValue.__html;\r\n            if (lastHtml !== nextHtml) {\r\n                if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {\r\n                    dom.innerHTML = nextHtml;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // We optimize for NS being boolean. Its 99.9% time false\r\n            if (isSVG && namespaces.has(prop)) {\r\n                // If we end up in this path we can read property again\r\n                dom.setAttributeNS(namespaces.get(prop), prop, nextValue);\r\n            }\r\n            else {\r\n                dom.setAttribute(prop, nextValue);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchEvent(name, lastValue, nextValue, dom) {\r\n    if (lastValue !== nextValue) {\r\n        if (delegatedEvents.has(name)) {\r\n            handleEvent(name, lastValue, nextValue, dom);\r\n        }\r\n        else {\r\n            var nameLowerCase = name.toLowerCase();\r\n            var domEvent = dom[nameLowerCase];\r\n            // if the function is wrapped, that means it's been controlled by a wrapper\r\n            if (domEvent && domEvent.wrapped) {\r\n                return;\r\n            }\r\n            if (!isFunction(nextValue) && !isNullOrUndef(nextValue)) {\r\n                var linkEvent = nextValue.event;\r\n                if (linkEvent && isFunction(linkEvent)) {\r\n                    dom[nameLowerCase] = function (e) {\r\n                        linkEvent(nextValue.data, e);\r\n                    };\r\n                }\r\n                else {\r\n                    if (false) {\r\n                        throwError((\"an event on a VNode \\\"\" + name + \"\\\". was not a function or a valid linkEvent.\"));\r\n                    }\r\n                    throwError();\r\n                }\r\n            }\r\n            else {\r\n                dom[nameLowerCase] = nextValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n// We are assuming here that we come from patchProp routine\r\n// -nextAttrValue cannot be null or undefined\r\nfunction patchStyle(lastAttrValue, nextAttrValue, dom) {\r\n    var domStyle = dom.style;\r\n    var style;\r\n    var value;\r\n    if (isString(nextAttrValue)) {\r\n        domStyle.cssText = nextAttrValue;\r\n        return;\r\n    }\r\n    if (!isNullOrUndef(lastAttrValue) && !isString(lastAttrValue)) {\r\n        for (style in nextAttrValue) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            value = nextAttrValue[style];\r\n            if (value !== lastAttrValue[style]) {\r\n                domStyle[style] =\r\n                    !isNumber(value) || isUnitlessNumber.has(style)\r\n                        ? value\r\n                        : value + \"px\";\r\n            }\r\n        }\r\n        for (style in lastAttrValue) {\r\n            if (isNullOrUndef(nextAttrValue[style])) {\r\n                domStyle[style] = \"\";\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (style in nextAttrValue) {\r\n            value = nextAttrValue[style];\r\n            domStyle[style] =\r\n                !isNumber(value) || isUnitlessNumber.has(style) ? value : value + \"px\";\r\n        }\r\n    }\r\n}\r\nfunction removeProp(prop, lastValue, dom, nextFlags) {\r\n    if (prop === \"value\") {\r\n        // When removing value of select element, it needs to be set to null instead empty string, because empty string is valid value for option which makes that option selected\r\n        // MS IE/Edge don't follow html spec for textArea and input elements and we need to set empty string to value in those cases to avoid \"null\" and \"undefined\" texts\r\n        dom.value = nextFlags & 2048 /* SelectElement */ ? null : \"\";\r\n    }\r\n    else if (prop === \"style\") {\r\n        dom.removeAttribute(\"style\");\r\n    }\r\n    else if (isAttrAnEvent(prop)) {\r\n        handleEvent(prop, lastValue, null, dom);\r\n    }\r\n    else {\r\n        dom.removeAttribute(prop);\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction mount(vNode, parentDom, lifecycle, context, isSVG) {\r\n    var flags = vNode.flags;\r\n    if (flags & 3970 /* Element */) {\r\n        return mountElement(vNode, parentDom, lifecycle, context, isSVG);\r\n    }\r\n    else if (flags & 28 /* Component */) {\r\n        return mountComponent(vNode, parentDom, lifecycle, context, isSVG, (flags & 4 /* ComponentClass */) > 0);\r\n    }\r\n    else if (flags & 4096 /* Void */) {\r\n        return mountVoid(vNode, parentDom);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        return mountText(vNode, parentDom);\r\n    }\r\n    else {\r\n        if (false) {\r\n            if (typeof vNode === \"object\") {\r\n                throwError((\"mount() received an object that's not a valid VNode, you should stringify it first. Object: \\\"\" + (JSON.stringify(vNode)) + \"\\\".\"));\r\n            }\r\n            else {\r\n                throwError((\"mount() expects a valid VNode, instead it received an object with the type \\\"\" + (typeof vNode) + \"\\\".\"));\r\n            }\r\n        }\r\n        throwError();\r\n    }\r\n}\r\nfunction mountText(vNode, parentDom) {\r\n    var dom = document.createTextNode(vNode.children);\r\n    vNode.dom = dom;\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountVoid(vNode, parentDom) {\r\n    var dom = document.createTextNode(\"\");\r\n    vNode.dom = dom;\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountElement(vNode, parentDom, lifecycle, context, isSVG) {\r\n    var dom;\r\n    if (options.recyclingEnabled) {\r\n        dom = recycleElement(vNode, lifecycle, context, isSVG);\r\n        if (!isNull(dom)) {\r\n            if (!isNull(parentDom)) {\r\n                appendChild(parentDom, dom);\r\n            }\r\n            return dom;\r\n        }\r\n    }\r\n    var flags = vNode.flags;\r\n    isSVG = isSVG || (flags & 128 /* SvgElement */) > 0;\r\n    dom = documentCreateElement(vNode.type, isSVG);\r\n    var children = vNode.children;\r\n    var props = vNode.props;\r\n    var className = vNode.className;\r\n    var ref = vNode.ref;\r\n    vNode.dom = dom;\r\n    if (!isInvalid(children)) {\r\n        if (isStringOrNumber(children)) {\r\n            setTextContent(dom, children);\r\n        }\r\n        else {\r\n            var childrenIsSVG = isSVG === true && vNode.type !== \"foreignObject\";\r\n            if (isArray(children)) {\r\n                mountArrayChildren(children, dom, lifecycle, context, childrenIsSVG);\r\n            }\r\n            else if (isVNode(children)) {\r\n                mount(children, dom, lifecycle, context, childrenIsSVG);\r\n            }\r\n        }\r\n    }\r\n    if (!isNull(props)) {\r\n        var hasControlledValue = false;\r\n        var isFormElement = (flags & 3584 /* FormElement */) > 0;\r\n        if (isFormElement) {\r\n            hasControlledValue = isControlledFormElement(props);\r\n        }\r\n        for (var prop in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\r\n        }\r\n        if (isFormElement) {\r\n            processElement(flags, vNode, dom, props, true, hasControlledValue);\r\n        }\r\n    }\r\n    if (className !== null) {\r\n        if (isSVG) {\r\n            dom.setAttribute(\"class\", className);\r\n        }\r\n        else {\r\n            dom.className = className;\r\n        }\r\n    }\r\n    if (!isNull(ref)) {\r\n        mountRef(dom, ref, lifecycle);\r\n    }\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountArrayChildren(children, dom, lifecycle, context, isSVG) {\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n        var child = children[i];\r\n        // Verify can string/number be here. might cause de-opt. - Normalization takes care of it.\r\n        if (!isInvalid(child)) {\r\n            if (child.dom) {\r\n                children[i] = child = directClone(child);\r\n            }\r\n            mount(children[i], dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n}\r\nfunction mountComponent(vNode, parentDom, lifecycle, context, isSVG, isClass) {\r\n    var dom;\r\n    if (options.recyclingEnabled) {\r\n        dom = recycleComponent(vNode, lifecycle, context, isSVG);\r\n        if (!isNull(dom)) {\r\n            if (!isNull(parentDom)) {\r\n                appendChild(parentDom, dom);\r\n            }\r\n            return dom;\r\n        }\r\n    }\r\n    var type = vNode.type;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var ref = vNode.ref;\r\n    if (isClass) {\r\n        var instance = createClassComponentInstance(vNode, type, props, context, isSVG, lifecycle);\r\n        var input = instance._lastInput;\r\n        instance._vNode = vNode;\r\n        vNode.dom = dom = mount(input, null, lifecycle, instance._childContext, isSVG);\r\n        if (!isNull(parentDom)) {\r\n            appendChild(parentDom, dom);\r\n        }\r\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\r\n        instance._updating = false;\r\n        if (options.findDOMNodeEnabled) {\r\n            componentToDOMNodeMap.set(instance, dom);\r\n        }\r\n    }\r\n    else {\r\n        var input$1 = createFunctionalComponentInput(vNode, type, props, context);\r\n        vNode.dom = dom = mount(input$1, null, lifecycle, context, isSVG);\r\n        vNode.children = input$1;\r\n        mountFunctionalComponentCallbacks(props, ref, dom, lifecycle);\r\n        if (!isNull(parentDom)) {\r\n            appendChild(parentDom, dom);\r\n        }\r\n    }\r\n    return dom;\r\n}\r\nfunction mountClassComponentCallbacks(vNode, ref, instance, lifecycle) {\r\n    if (ref) {\r\n        if (isFunction(ref)) {\r\n            ref(instance);\r\n        }\r\n        else {\r\n            if (false) {\r\n                if (isStringOrNumber(ref)) {\r\n                    throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n                }\r\n                else if (isObject(ref) && vNode.flags & 4 /* ComponentClass */) {\r\n                    throwError(\"functional component lifecycle events are not supported on ES2015 class components.\");\r\n                }\r\n                else {\r\n                    throwError((\"a bad value for \\\"ref\\\" was used on component: \\\"\" + (JSON.stringify(ref)) + \"\\\"\"));\r\n                }\r\n            }\r\n            throwError();\r\n        }\r\n    }\r\n    var hasDidMount = !isUndefined(instance.componentDidMount);\r\n    var afterMount = options.afterMount;\r\n    if (hasDidMount || !isNull(afterMount)) {\r\n        lifecycle.addListener((function () {\r\n            instance._updating = true;\r\n            if (afterMount) {\r\n                afterMount(vNode);\r\n            }\r\n            if (hasDidMount) {\r\n                instance.componentDidMount();\r\n            }\r\n            instance._updating = false;\r\n        }));\r\n    }\r\n}\r\nfunction mountFunctionalComponentCallbacks(props, ref, dom, lifecycle) {\r\n    if (ref) {\r\n        if (!isNullOrUndef(ref.onComponentWillMount)) {\r\n            ref.onComponentWillMount(props);\r\n        }\r\n        if (!isNullOrUndef(ref.onComponentDidMount)) {\r\n            lifecycle.addListener((function () { return ref.onComponentDidMount(dom, props); }));\r\n        }\r\n    }\r\n}\r\nfunction mountRef(dom, value, lifecycle) {\r\n    if (isFunction(value)) {\r\n        lifecycle.addListener((function () { return value(dom); }));\r\n    }\r\n    else {\r\n        if (isInvalid(value)) {\r\n            return;\r\n        }\r\n        if (false) {\r\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n        }\r\n        throwError();\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n// We need EMPTY_OBJ defined in one place.\r\n// Its used for comparison so we cant inline it into shared\r\nvar EMPTY_OBJ = {};\r\nif (false) {\r\n    Object.freeze(EMPTY_OBJ);\r\n}\r\nfunction createClassComponentInstance(vNode, Component, props, context, isSVG, lifecycle) {\r\n    if (isUndefined(context)) {\r\n        context = EMPTY_OBJ; // Context should not be mutable\r\n    }\r\n    var instance = new Component(props, context);\r\n    vNode.children = instance;\r\n    instance._blockSetState = false;\r\n    instance.context = context;\r\n    if (instance.props === EMPTY_OBJ) {\r\n        instance.props = props;\r\n    }\r\n    // setState callbacks must fire after render is done when called from componentWillReceiveProps or componentWillMount\r\n    instance._lifecycle = lifecycle;\r\n    instance._unmounted = false;\r\n    instance._pendingSetState = true;\r\n    instance._isSVG = isSVG;\r\n    if (!isNullOrUndef(instance.componentWillMount)) {\r\n        instance._blockRender = true;\r\n        instance.componentWillMount();\r\n        instance._blockRender = false;\r\n    }\r\n    var childContext;\r\n    if (!isNullOrUndef(instance.getChildContext)) {\r\n        childContext = instance.getChildContext();\r\n    }\r\n    if (isNullOrUndef(childContext)) {\r\n        instance._childContext = context;\r\n    }\r\n    else {\r\n        instance._childContext = combineFrom(context, childContext);\r\n    }\r\n    if (!isNull(options.beforeRender)) {\r\n        options.beforeRender(instance);\r\n    }\r\n    var input = instance.render(props, instance.state, context);\r\n    if (!isNull(options.afterRender)) {\r\n        options.afterRender(instance);\r\n    }\r\n    if (isArray(input)) {\r\n        if (false) {\r\n            throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n        }\r\n        throwError();\r\n    }\r\n    else if (isInvalid(input)) {\r\n        input = createVoidVNode();\r\n    }\r\n    else if (isStringOrNumber(input)) {\r\n        input = createTextVNode(input, null);\r\n    }\r\n    else {\r\n        if (input.dom) {\r\n            input = directClone(input);\r\n        }\r\n        if (input.flags & 28 /* Component */) {\r\n            // if we have an input that is also a component, we run into a tricky situation\r\n            // where the root vNode needs to always have the correct DOM entry\r\n            // so we break monomorphism on our input and supply it our vNode as parentVNode\r\n            // we can optimise this in the future, but this gets us out of a lot of issues\r\n            input.parentVNode = vNode;\r\n        }\r\n    }\r\n    instance._pendingSetState = false;\r\n    instance._lastInput = input;\r\n    return instance;\r\n}\r\nfunction replaceLastChildAndUnmount(lastInput, nextInput, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    replaceVNode(parentDom, mount(nextInput, null, lifecycle, context, isSVG), lastInput, lifecycle, isRecycling);\r\n}\r\nfunction replaceVNode(parentDom, dom, vNode, lifecycle, isRecycling) {\r\n    unmount(vNode, null, lifecycle, false, isRecycling);\r\n    replaceChild(parentDom, dom, vNode.dom);\r\n}\r\nfunction createFunctionalComponentInput(vNode, component, props, context) {\r\n    var input = component(props, context);\r\n    if (isArray(input)) {\r\n        if (false) {\r\n            throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n        }\r\n        throwError();\r\n    }\r\n    else if (isInvalid(input)) {\r\n        input = createVoidVNode();\r\n    }\r\n    else if (isStringOrNumber(input)) {\r\n        input = createTextVNode(input, null);\r\n    }\r\n    else {\r\n        if (input.dom) {\r\n            input = directClone(input);\r\n        }\r\n        if (input.flags & 28 /* Component */) {\r\n            // if we have an input that is also a component, we run into a tricky situation\r\n            // where the root vNode needs to always have the correct DOM entry\r\n            // so we break monomorphism on our input and supply it our vNode as parentVNode\r\n            // we can optimise this in the future, but this gets us out of a lot of issues\r\n            input.parentVNode = vNode;\r\n        }\r\n    }\r\n    return input;\r\n}\r\nfunction setTextContent(dom, text) {\r\n    if (text !== \"\") {\r\n        dom.textContent = text;\r\n    }\r\n    else {\r\n        dom.appendChild(document.createTextNode(\"\"));\r\n    }\r\n}\r\nfunction updateTextContent(dom, text) {\r\n    dom.firstChild.nodeValue = text;\r\n}\r\nfunction appendChild(parentDom, dom) {\r\n    parentDom.appendChild(dom);\r\n}\r\nfunction insertOrAppend(parentDom, newNode, nextNode) {\r\n    if (isNullOrUndef(nextNode)) {\r\n        appendChild(parentDom, newNode);\r\n    }\r\n    else {\r\n        parentDom.insertBefore(newNode, nextNode);\r\n    }\r\n}\r\nfunction documentCreateElement(tag, isSVG) {\r\n    if (isSVG === true) {\r\n        return document.createElementNS(svgNS, tag);\r\n    }\r\n    else {\r\n        return document.createElement(tag);\r\n    }\r\n}\r\nfunction replaceWithNewNode(lastNode, nextNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    unmount(lastNode, null, lifecycle, false, isRecycling);\r\n    var dom = mount(nextNode, null, lifecycle, context, isSVG);\r\n    nextNode.dom = dom;\r\n    replaceChild(parentDom, dom, lastNode.dom);\r\n}\r\nfunction replaceChild(parentDom, nextDom, lastDom) {\r\n    if (!parentDom) {\r\n        parentDom = lastDom.parentNode;\r\n    }\r\n    parentDom.replaceChild(nextDom, lastDom);\r\n}\r\nfunction removeChild(parentDom, dom) {\r\n    parentDom.removeChild(dom);\r\n}\r\nfunction removeAllChildren(dom, children, lifecycle, isRecycling) {\r\n    if (!options.recyclingEnabled || (options.recyclingEnabled && !isRecycling)) {\r\n        removeChildren(null, children, lifecycle, isRecycling);\r\n    }\r\n    dom.textContent = \"\";\r\n}\r\nfunction removeChildren(dom, children, lifecycle, isRecycling) {\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n        var child = children[i];\r\n        if (!isInvalid(child)) {\r\n            unmount(child, dom, lifecycle, true, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction isKeyed(lastChildren, nextChildren) {\r\n    return (nextChildren.length > 0 &&\r\n        !isNullOrUndef(nextChildren[0]) &&\r\n        !isNullOrUndef(nextChildren[0].key) &&\r\n        lastChildren.length > 0 &&\r\n        !isNullOrUndef(lastChildren[0]) &&\r\n        !isNullOrUndef(lastChildren[0].key));\r\n}\r\nfunction isSameInnerHTML(dom, innerHTML) {\r\n    var tempdom = document.createElement(\"i\");\r\n    tempdom.innerHTML = innerHTML;\r\n    return tempdom.innerHTML === dom.innerHTML;\r\n}\r\nfunction isSamePropsInnerHTML(dom, props) {\r\n    return Boolean(props &&\r\n        props.dangerouslySetInnerHTML &&\r\n        props.dangerouslySetInnerHTML.__html &&\r\n        isSameInnerHTML(dom, props.dangerouslySetInnerHTML.__html));\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction VNode(children, className, flags, key, props, ref, type) {\r\n    this.children = children;\r\n    this.className = className;\r\n    this.dom = null;\r\n    this.flags = flags;\r\n    this.key = key;\r\n    this.props = props;\r\n    this.ref = ref;\r\n    this.type = type;\r\n}\r\n/**\r\n * Creates virtual node\r\n * @param {number} flags\r\n * @param {string|Function|null} type\r\n * @param {string|null=} className\r\n * @param {object=} children\r\n * @param {object=} props\r\n * @param {*=} key\r\n * @param {object|Function=} ref\r\n * @param {boolean=} noNormalise\r\n * @returns {VNode} returns new virtual node\r\n */\r\nfunction createVNode(flags, type, className, children, props, key, ref, noNormalise) {\r\n    if (flags & 16 /* ComponentUnknown */) {\r\n        flags = isStatefulComponent(type)\r\n            ? 4 /* ComponentClass */\r\n            : 8 /* ComponentFunction */;\r\n    }\r\n    var vNode = new VNode(children === void 0 ? null : children, className === void 0 ? null : className, flags, key === void 0 ? null : key, props === void 0 ? null : props, ref === void 0 ? null : ref, type);\r\n    if (noNormalise !== true) {\r\n        normalize(vNode);\r\n    }\r\n    if (options.createVNode !== null) {\r\n        options.createVNode(vNode);\r\n    }\r\n    return vNode;\r\n}\r\nfunction directClone(vNodeToClone) {\r\n    var newVNode;\r\n    var flags = vNodeToClone.flags;\r\n    if (flags & 28 /* Component */) {\r\n        var props;\r\n        var propsToClone = vNodeToClone.props;\r\n        if (isNull(propsToClone)) {\r\n            props = EMPTY_OBJ;\r\n        }\r\n        else {\r\n            props = {};\r\n            for (var key in propsToClone) {\r\n                props[key] = propsToClone[key];\r\n            }\r\n        }\r\n        newVNode = createVNode(flags, vNodeToClone.type, null, null, props, vNodeToClone.key, vNodeToClone.ref, true);\r\n        var newProps = newVNode.props;\r\n        var newChildren = newProps.children;\r\n        // we need to also clone component children that are in props\r\n        // as the children may also have been hoisted\r\n        if (newChildren) {\r\n            if (isArray(newChildren)) {\r\n                var len = newChildren.length;\r\n                if (len > 0) {\r\n                    var tmpArray = [];\r\n                    for (var i = 0; i < len; i++) {\r\n                        var child = newChildren[i];\r\n                        if (isStringOrNumber(child)) {\r\n                            tmpArray.push(child);\r\n                        }\r\n                        else if (!isInvalid(child) && isVNode(child)) {\r\n                            tmpArray.push(directClone(child));\r\n                        }\r\n                    }\r\n                    newProps.children = tmpArray;\r\n                }\r\n            }\r\n            else if (isVNode(newChildren)) {\r\n                newProps.children = directClone(newChildren);\r\n            }\r\n        }\r\n        newVNode.children = null;\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        var children = vNodeToClone.children;\r\n        var props$1;\r\n        var propsToClone$1 = vNodeToClone.props;\r\n        if (propsToClone$1 === null) {\r\n            props$1 = EMPTY_OBJ;\r\n        }\r\n        else {\r\n            props$1 = {};\r\n            for (var key$1 in propsToClone$1) {\r\n                props$1[key$1] = propsToClone$1[key$1];\r\n            }\r\n        }\r\n        newVNode = createVNode(flags, vNodeToClone.type, vNodeToClone.className, children, props$1, vNodeToClone.key, vNodeToClone.ref, !children);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        newVNode = createTextVNode(vNodeToClone.children, vNodeToClone.key);\r\n    }\r\n    return newVNode;\r\n}\r\n/*\r\n directClone is preferred over cloneVNode and used internally also.\r\n This function makes Inferno backwards compatible.\r\n And can be tree-shaked by modern bundlers\r\n\n Would be nice to combine this with directClone but could not do it without breaking change\r\n */\r\n/**\r\n * Clones given virtual node by creating new instance of it\r\n * @param {VNode} vNodeToClone virtual node to be cloned\r\n * @param {Props=} props additional props for new virtual node\r\n * @param {...*} _children new children for new virtual node\r\n * @returns {VNode} new virtual node\r\n */\r\nfunction cloneVNode(vNodeToClone, props) {\n    var _children = [], len$2 = arguments.length - 2;\n    while ( len$2-- > 0 ) _children[ len$2 ] = arguments[ len$2 + 2 ];\n\r\n    var children = _children;\r\n    var childrenLen = _children.length;\r\n    if (childrenLen > 0 && !isUndefined(_children[0])) {\r\n        if (!props) {\r\n            props = {};\r\n        }\r\n        if (childrenLen === 1) {\r\n            children = _children[0];\r\n        }\r\n        if (!isUndefined(children)) {\r\n            props.children = children;\r\n        }\r\n    }\r\n    var newVNode;\r\n    if (isArray(vNodeToClone)) {\r\n        var tmpArray = [];\r\n        for (var i = 0, len = vNodeToClone.length; i < len; i++) {\r\n            tmpArray.push(directClone(vNodeToClone[i]));\r\n        }\r\n        newVNode = tmpArray;\r\n    }\r\n    else {\r\n        var flags = vNodeToClone.flags;\r\n        var className = vNodeToClone.className;\r\n        var key = vNodeToClone.key;\r\n        var ref = vNodeToClone.ref;\r\n        if (props) {\r\n            if (props.hasOwnProperty(\"className\")) {\r\n                className = props.className;\r\n            }\r\n            if (props.hasOwnProperty(\"ref\")) {\r\n                ref = props.ref;\r\n            }\r\n            if (props.hasOwnProperty(\"key\")) {\r\n                key = props.key;\r\n            }\r\n        }\r\n        if (flags & 28 /* Component */) {\r\n            newVNode = createVNode(flags, vNodeToClone.type, className, null, !vNodeToClone.props && !props\r\n                ? EMPTY_OBJ\r\n                : combineFrom(vNodeToClone.props, props), key, ref, true);\r\n            var newProps = newVNode.props;\r\n            if (newProps) {\r\n                var newChildren = newProps.children;\r\n                // we need to also clone component children that are in props\r\n                // as the children may also have been hoisted\r\n                if (newChildren) {\r\n                    if (isArray(newChildren)) {\r\n                        var len$1 = newChildren.length;\r\n                        if (len$1 > 0) {\r\n                            var tmpArray$1 = [];\r\n                            for (var i$1 = 0; i$1 < len$1; i$1++) {\r\n                                var child = newChildren[i$1];\r\n                                if (isStringOrNumber(child)) {\r\n                                    tmpArray$1.push(child);\r\n                                }\r\n                                else if (!isInvalid(child) && isVNode(child)) {\r\n                                    tmpArray$1.push(directClone(child));\r\n                                }\r\n                            }\r\n                            newProps.children = tmpArray$1;\r\n                        }\r\n                    }\r\n                    else if (isVNode(newChildren)) {\r\n                        newProps.children = directClone(newChildren);\r\n                    }\r\n                }\r\n            }\r\n            newVNode.children = null;\r\n        }\r\n        else if (flags & 3970 /* Element */) {\r\n            children =\r\n                props && !isUndefined(props.children)\r\n                    ? props.children\r\n                    : vNodeToClone.children;\r\n            newVNode = createVNode(flags, vNodeToClone.type, className, children, !vNodeToClone.props && !props\r\n                ? EMPTY_OBJ\r\n                : combineFrom(vNodeToClone.props, props), key, ref, false);\r\n        }\r\n        else if (flags & 1 /* Text */) {\r\n            newVNode = createTextVNode(vNodeToClone.children, key);\r\n        }\r\n    }\r\n    return newVNode;\r\n}\r\nfunction createVoidVNode() {\r\n    return createVNode(4096 /* Void */, null);\r\n}\r\nfunction createTextVNode(text, key) {\r\n    return createVNode(1 /* Text */, null, null, text, null, key);\r\n}\r\nfunction isVNode(o) {\r\n    return !!o.flags;\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction applyKey(key, vNode) {\r\n    vNode.key = key;\r\n    return vNode;\r\n}\r\nfunction applyKeyIfMissing(key, vNode) {\r\n    if (isNumber(key)) {\r\n        key = \".\" + key;\r\n    }\r\n    if (isNull(vNode.key) || vNode.key[0] === \".\") {\r\n        return applyKey(key, vNode);\r\n    }\r\n    return vNode;\r\n}\r\nfunction applyKeyPrefix(key, vNode) {\r\n    vNode.key = key + vNode.key;\r\n    return vNode;\r\n}\r\nfunction _normalizeVNodes(nodes, result, index, currentKey) {\r\n    for (var len = nodes.length; index < len; index++) {\r\n        var n = nodes[index];\r\n        var key = currentKey + \".\" + index;\r\n        if (!isInvalid(n)) {\r\n            if (isArray(n)) {\r\n                _normalizeVNodes(n, result, 0, key);\r\n            }\r\n            else {\r\n                if (isStringOrNumber(n)) {\r\n                    n = createTextVNode(n, null);\r\n                }\r\n                else if ((isVNode(n) && n.dom) || (n.key && n.key[0] === \".\")) {\r\n                    n = directClone(n);\r\n                }\r\n                if (isNull(n.key) || n.key[0] === \".\") {\r\n                    n = applyKey(key, n);\r\n                }\r\n                else {\r\n                    n = applyKeyPrefix(currentKey, n);\r\n                }\r\n                result.push(n);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction normalizeVNodes(nodes) {\r\n    var newNodes;\r\n    // we assign $ which basically means we've flagged this array for future note\r\n    // if it comes back again, we need to clone it, as people are using it\r\n    // in an immutable way\r\n    // tslint:disable\r\n    if (nodes[\"$\"] === true) {\r\n        nodes = nodes.slice();\r\n    }\r\n    else {\r\n        nodes[\"$\"] = true;\r\n    }\r\n    // tslint:enable\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n        var n = nodes[i];\r\n        if (isInvalid(n) || isArray(n)) {\r\n            var result = (newNodes || nodes).slice(0, i);\r\n            _normalizeVNodes(nodes, result, i, \"\");\r\n            return result;\r\n        }\r\n        else if (isStringOrNumber(n)) {\r\n            if (!newNodes) {\r\n                newNodes = nodes.slice(0, i);\r\n            }\r\n            newNodes.push(applyKeyIfMissing(i, createTextVNode(n, null)));\r\n        }\r\n        else if ((isVNode(n) && n.dom !== null) ||\r\n            (isNull(n.key) && (n.flags & 64 /* HasNonKeyedChildren */) === 0)) {\r\n            if (!newNodes) {\r\n                newNodes = nodes.slice(0, i);\r\n            }\r\n            newNodes.push(applyKeyIfMissing(i, directClone(n)));\r\n        }\r\n        else if (newNodes) {\r\n            newNodes.push(applyKeyIfMissing(i, directClone(n)));\r\n        }\r\n    }\r\n    return newNodes || nodes;\r\n}\r\nfunction normalizeChildren(children) {\r\n    if (isArray(children)) {\r\n        return normalizeVNodes(children);\r\n    }\r\n    else if (isVNode(children) && children.dom !== null) {\r\n        return directClone(children);\r\n    }\r\n    return children;\r\n}\r\nfunction normalizeProps(vNode, props, children) {\r\n    if (vNode.flags & 3970 /* Element */) {\r\n        if (isNullOrUndef(children) && props.hasOwnProperty(\"children\")) {\r\n            vNode.children = props.children;\r\n        }\r\n        if (props.hasOwnProperty(\"className\")) {\r\n            vNode.className = props.className || null;\r\n            delete props.className;\r\n        }\r\n    }\r\n    if (props.hasOwnProperty(\"ref\")) {\r\n        vNode.ref = props.ref;\r\n        delete props.ref;\r\n    }\r\n    if (props.hasOwnProperty(\"key\")) {\r\n        vNode.key = props.key;\r\n        delete props.key;\r\n    }\r\n}\r\nfunction getFlagsForElementVnode(type) {\r\n    if (type === \"svg\") {\r\n        return 128 /* SvgElement */;\r\n    }\r\n    else if (type === \"input\") {\r\n        return 512 /* InputElement */;\r\n    }\r\n    else if (type === \"select\") {\r\n        return 2048 /* SelectElement */;\r\n    }\r\n    else if (type === \"textarea\") {\r\n        return 1024 /* TextareaElement */;\r\n    }\r\n    else if (type === \"media\") {\r\n        return 256 /* MediaElement */;\r\n    }\r\n    return 2 /* HtmlElement */;\r\n}\r\nfunction normalize(vNode) {\r\n    var props = vNode.props;\r\n    var children = vNode.children;\r\n    // convert a wrongly created type back to element\r\n    // Primitive node doesn't have defaultProps, only Component\r\n    if (vNode.flags & 28 /* Component */) {\r\n        // set default props\r\n        var type = vNode.type;\r\n        var defaultProps = type.defaultProps;\r\n        if (!isNullOrUndef(defaultProps)) {\r\n            if (!props) {\r\n                props = vNode.props = defaultProps; // Create new object if only defaultProps given\r\n            }\r\n            else {\r\n                for (var prop in defaultProps) {\r\n                    if (isUndefined(props[prop])) {\r\n                        props[prop] = defaultProps[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isString(type)) {\r\n            vNode.flags = getFlagsForElementVnode(type);\r\n            if (props && props.children) {\r\n                vNode.children = props.children;\r\n                children = props.children;\r\n            }\r\n        }\r\n    }\r\n    if (props) {\r\n        normalizeProps(vNode, props, children);\r\n        if (!isInvalid(props.children)) {\r\n            props.children = normalizeChildren(props.children);\r\n        }\r\n    }\r\n    if (!isInvalid(children)) {\r\n        vNode.children = normalizeChildren(children);\r\n    }\r\n    if (false) {\r\n        // This code will be stripped out from production CODE\r\n        // It helps users to track errors in their applications.\r\n        var verifyKeys = function (vNodes) {\r\n            var keyValues = vNodes.map((function (vnode) {\r\n                return vnode.key;\r\n            }));\r\n            keyValues.some((function (item, idx) {\r\n                var hasDuplicate = keyValues.indexOf(item) !== idx;\r\n                if (hasDuplicate) {\r\n                    warning(\"Inferno normalisation(...): Encountered two children with same key, all keys must be unique within its siblings. Duplicated key is:\" +\r\n                        item);\r\n                }\r\n                return hasDuplicate;\r\n            }));\r\n        };\r\n        if (vNode.children && Array.isArray(vNode.children)) {\r\n            verifyKeys(vNode.children);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n/**\r\n * Links given data to event as first parameter\r\n * @param {*} data data to be linked, it will be available in function as first parameter\r\n * @param {Function} event Function to be called when event occurs\r\n * @returns {{data: *, event: Function}}\r\n */\r\nfunction linkEvent(data, event) {\r\n    if (isFunction(event)) {\r\n        return { data: data, event: event };\r\n    }\r\n    return null; // Return null when event is invalid, to avoid creating unnecessary event handlers\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n/* tslint:disable:object-literal-sort-keys */\r\nif (false) {\r\n    /* tslint:disable-next-line:no-empty */\r\n    var testFunc = function testFn() { };\r\n    if ((testFunc.name || testFunc.toString()).indexOf(\"testFn\") ===\r\n        -1) {\r\n        warning(\"It looks like you're using a minified copy of the development build \" +\r\n            \"of Inferno. When deploying Inferno apps to production, make sure to use \" +\r\n            \"the production build which skips development warnings and is faster. \" +\r\n            \"See http://infernojs.org for more details.\");\r\n    }\r\n}\r\nvar version = \"3.8.2\";\r\n// we duplicate it so it plays nicely with different module loading systems\r\nvar index = {\r\n    EMPTY_OBJ: EMPTY_OBJ,\r\n    NO_OP: NO_OP,\r\n    cloneVNode: cloneVNode,\r\n    createRenderer: createRenderer,\r\n    createVNode: createVNode,\r\n    findDOMNode: findDOMNode,\r\n    getFlagsForElementVnode: getFlagsForElementVnode,\r\n    internal_DOMNodeMap: componentToDOMNodeMap,\r\n    internal_isUnitlessNumber: isUnitlessNumber,\r\n    internal_normalize: normalize,\r\n    internal_patch: patch,\r\n    linkEvent: linkEvent,\r\n    options: options,\r\n    render: render,\r\n    version: version\r\n};\n\nexports['default'] = index;\nexports.EMPTY_OBJ = EMPTY_OBJ;\nexports.NO_OP = NO_OP;\nexports.cloneVNode = cloneVNode;\nexports.createRenderer = createRenderer;\nexports.createVNode = createVNode;\nexports.findDOMNode = findDOMNode;\nexports.getFlagsForElementVnode = getFlagsForElementVnode;\nexports.internal_DOMNodeMap = componentToDOMNodeMap;\nexports.internal_isUnitlessNumber = isUnitlessNumber;\nexports.internal_normalize = normalize;\nexports.internal_patch = patch;\nexports.linkEvent = linkEvent;\nexports.options = options;\nexports.render = render;\nexports.version = version;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(4).default;\nmodule.exports.default = module.exports;\n\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar inferno = __webpack_require__(0);\n\n/**\r\n * @module Inferno-Shared\r\n */ /** TypeDoc Comment */\r\nvar NO_OP = \"$NO_OP\";\r\nvar ERROR_MSG = \"a runtime error occured! Use Inferno in development environment to find the error.\";\r\n// This should be boolean and not reference to window.document\r\nvar isBrowser = !!(typeof window !== \"undefined\" && window.document);\r\n// this is MUCH faster than .constructor === Array and instanceof Array\r\n// in Node 7 and the later versions of V8, slower in older versions though\r\nvar isArray = Array.isArray;\r\nfunction isStringOrNumber(o) {\r\n    var type = typeof o;\r\n    return type === \"string\" || type === \"number\";\r\n}\r\nfunction isNullOrUndef(o) {\r\n    return isUndefined(o) || isNull(o);\r\n}\r\nfunction isInvalid(o) {\r\n    return isNull(o) || o === false || isTrue(o) || isUndefined(o);\r\n}\r\nfunction isFunction(o) {\r\n    return typeof o === \"function\";\r\n}\r\nfunction isNull(o) {\r\n    return o === null;\r\n}\r\nfunction isTrue(o) {\r\n    return o === true;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === void 0;\r\n}\r\nfunction throwError(message) {\r\n    if (!message) {\r\n        message = ERROR_MSG;\r\n    }\r\n    throw new Error((\"Inferno Error: \" + message));\r\n}\r\nfunction combineFrom(first, second) {\r\n    var out = {};\r\n    if (first) {\r\n        for (var key in first) {\r\n            out[key] = first[key];\r\n        }\r\n    }\r\n    if (second) {\r\n        for (var key$1 in second) {\r\n            out[key$1] = second[key$1];\r\n        }\r\n    }\r\n    return out;\r\n}\n\n/**\r\n * @module Inferno-Component\r\n */ /** TypeDoc Comment */\r\n// Make sure u use EMPTY_OBJ from 'inferno', otherwise it'll be a different reference\r\nvar noOp = ERROR_MSG;\r\nif (false) {\r\n    noOp =\r\n        \"Inferno Error: Can only update a mounted or mounting component. This usually means you called setState() or forceUpdate() on an unmounted component. This is a no-op.\";\r\n}\r\nvar componentCallbackQueue = new Map();\r\n// when a components root VNode is also a component, we can run into issues\r\n// this will recursively look for vNode.parentNode if the VNode is a component\r\nfunction updateParentComponentVNodes(vNode, dom) {\r\n    if (vNode.flags & 28 /* Component */) {\r\n        var parentVNode = vNode.parentVNode;\r\n        if (parentVNode) {\r\n            parentVNode.dom = dom;\r\n            updateParentComponentVNodes(parentVNode, dom);\r\n        }\r\n    }\r\n}\r\nvar resolvedPromise = Promise.resolve();\r\nfunction addToQueue(component, force, callback) {\r\n    var queue = componentCallbackQueue.get(component);\r\n    if (queue === void 0) {\r\n        queue = [];\r\n        componentCallbackQueue.set(component, queue);\r\n        resolvedPromise.then((function () {\r\n            componentCallbackQueue.delete(component);\r\n            component._updating = true;\r\n            applyState(component, force, (function () {\r\n                for (var i = 0, len = queue.length; i < len; i++) {\r\n                    queue[i].call(component);\r\n                }\r\n            }));\r\n            component._updating = false;\r\n        }));\r\n    }\r\n    if (!isNullOrUndef(callback)) {\r\n        queue.push(callback);\r\n    }\r\n}\r\nfunction queueStateChanges(component, newState, callback) {\r\n    if (isFunction(newState)) {\r\n        newState = newState(component.state, component.props, component.context);\r\n    }\r\n    var pending = component._pendingState;\r\n    if (isNullOrUndef(pending)) {\r\n        component._pendingState = pending = newState;\r\n    }\r\n    else {\r\n        for (var stateKey in newState) {\r\n            pending[stateKey] = newState[stateKey];\r\n        }\r\n    }\r\n    if (isBrowser && !component._pendingSetState && !component._blockRender) {\r\n        if (!component._updating) {\r\n            component._pendingSetState = true;\r\n            component._updating = true;\r\n            applyState(component, false, callback);\r\n            component._updating = false;\r\n        }\r\n        else {\r\n            addToQueue(component, false, callback);\r\n        }\r\n    }\r\n    else {\r\n        var state = component.state;\r\n        if (state === null) {\r\n            component.state = pending;\r\n        }\r\n        else {\r\n            for (var key in pending) {\r\n                state[key] = pending[key];\r\n            }\r\n        }\r\n        component._pendingState = null;\r\n        if (!isNullOrUndef(callback) && component._blockRender) {\r\n            component._lifecycle.addListener(callback.bind(component));\r\n        }\r\n    }\r\n}\r\nfunction applyState(component, force, callback) {\r\n    if (component._unmounted) {\r\n        return;\r\n    }\r\n    if (force || !component._blockRender) {\r\n        component._pendingSetState = false;\r\n        var pendingState = component._pendingState;\r\n        var prevState = component.state;\r\n        var nextState = combineFrom(prevState, pendingState);\r\n        var props = component.props;\r\n        var context = component.context;\r\n        component._pendingState = null;\r\n        var nextInput = component._updateComponent(prevState, nextState, props, props, context, force, true);\r\n        var didUpdate = true;\r\n        if (isInvalid(nextInput)) {\r\n            nextInput = inferno.createVNode(4096 /* Void */, null);\r\n        }\r\n        else if (nextInput === NO_OP) {\r\n            nextInput = component._lastInput;\r\n            didUpdate = false;\r\n        }\r\n        else if (isStringOrNumber(nextInput)) {\r\n            nextInput = inferno.createVNode(1 /* Text */, null, null, nextInput);\r\n        }\r\n        else if (isArray(nextInput)) {\r\n            if (false) {\r\n                throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n            }\r\n            throwError();\r\n        }\r\n        var lastInput = component._lastInput;\r\n        var vNode = component._vNode;\r\n        var parentDom = (lastInput.dom && lastInput.dom.parentNode) ||\r\n            (lastInput.dom = vNode.dom);\r\n        component._lastInput = nextInput;\r\n        if (didUpdate) {\r\n            var childContext;\r\n            if (!isNullOrUndef(component.getChildContext)) {\r\n                childContext = component.getChildContext();\r\n            }\r\n            if (isNullOrUndef(childContext)) {\r\n                childContext = component._childContext;\r\n            }\r\n            else {\r\n                childContext = combineFrom(context, childContext);\r\n            }\r\n            var lifeCycle = component._lifecycle;\r\n            inferno.internal_patch(lastInput, nextInput, parentDom, lifeCycle, childContext, component._isSVG, false);\r\n            lifeCycle.trigger();\r\n            if (!isNullOrUndef(component.componentDidUpdate)) {\r\n                component.componentDidUpdate(props, prevState, context);\r\n            }\r\n            if (!isNull(inferno.options.afterUpdate)) {\r\n                inferno.options.afterUpdate(vNode);\r\n            }\r\n        }\r\n        var dom = (vNode.dom = nextInput.dom);\r\n        if (inferno.options.findDOMNodeEnabled) {\r\n            inferno.internal_DOMNodeMap.set(component, nextInput.dom);\r\n        }\r\n        updateParentComponentVNodes(vNode, dom);\r\n    }\r\n    else {\r\n        component.state = component._pendingState;\r\n        component._pendingState = null;\r\n    }\r\n    if (!isNullOrUndef(callback)) {\r\n        callback.call(component);\r\n    }\r\n}\r\nvar Component = function Component(props, context) {\r\n    this.state = null;\r\n    this._blockRender = false;\r\n    this._blockSetState = true;\r\n    this._pendingSetState = false;\r\n    this._pendingState = null;\r\n    this._lastInput = null;\r\n    this._vNode = null;\r\n    this._unmounted = false;\r\n    this._lifecycle = null;\r\n    this._childContext = null;\r\n    this._isSVG = false;\r\n    this._updating = true;\r\n    /** @type {object} */\r\n    this.props = props || inferno.EMPTY_OBJ;\r\n    /** @type {object} */\r\n    this.context = context || inferno.EMPTY_OBJ; // context should not be mutable\r\n};\r\nComponent.prototype.forceUpdate = function forceUpdate (callback) {\r\n    if (this._unmounted || !isBrowser) {\r\n        return;\r\n    }\r\n    applyState(this, true, callback);\r\n};\r\nComponent.prototype.setState = function setState (newState, callback) {\r\n    if (this._unmounted) {\r\n        return;\r\n    }\r\n    if (!this._blockSetState) {\r\n        queueStateChanges(this, newState, callback);\r\n    }\r\n    else {\r\n        if (false) {\r\n            throwError(\"cannot update state via setState() in componentWillUpdate() or constructor.\");\r\n        }\r\n        throwError();\r\n    }\r\n};\r\nComponent.prototype._updateComponent = function _updateComponent (prevState, nextState, prevProps, nextProps, context, force, fromSetState) {\r\n    if (this._unmounted === true) {\r\n        if (false) {\r\n            throwError(noOp);\r\n        }\r\n        throwError();\r\n    }\r\n    if (prevProps !== nextProps ||\r\n        nextProps === inferno.EMPTY_OBJ ||\r\n        prevState !== nextState ||\r\n        force) {\r\n        if (prevProps !== nextProps || nextProps === inferno.EMPTY_OBJ) {\r\n            if (!isNullOrUndef(this.componentWillReceiveProps) && !fromSetState) {\r\n                // keep a copy of state before componentWillReceiveProps\r\n                var beforeState = combineFrom(this.state);\r\n                this._blockRender = true;\r\n                this.componentWillReceiveProps(nextProps, context);\r\n                this._blockRender = false;\r\n                var afterState = this.state;\r\n                if (beforeState !== afterState) {\r\n                    // if state changed in componentWillReceiveProps, reassign the beforeState\r\n                    this.state = beforeState;\r\n                    // set the afterState as pending state so the change gets picked up below\r\n                    this._pendingSetState = true;\r\n                    this._pendingState = afterState;\r\n                }\r\n            }\r\n            if (this._pendingSetState) {\r\n                nextState = combineFrom(nextState, this._pendingState);\r\n                this._pendingSetState = false;\r\n                this._pendingState = null;\r\n            }\r\n        }\r\n        /* Update if scu is not defined, or it returns truthy value or force */\r\n        if (force ||\r\n            isNullOrUndef(this.shouldComponentUpdate) ||\r\n            (this.shouldComponentUpdate &&\r\n                this.shouldComponentUpdate(nextProps, nextState, context))) {\r\n            if (!isNullOrUndef(this.componentWillUpdate)) {\r\n                this._blockSetState = true;\r\n                this.componentWillUpdate(nextProps, nextState, context);\r\n                this._blockSetState = false;\r\n            }\r\n            this.props = nextProps;\r\n            this.state = nextState;\r\n            this.context = context;\r\n            if (inferno.options.beforeRender) {\r\n                inferno.options.beforeRender(this);\r\n            }\r\n            var render = this.render(nextProps, nextState, context);\r\n            if (inferno.options.afterRender) {\r\n                inferno.options.afterRender(this);\r\n            }\r\n            return render;\r\n        }\r\n        else {\r\n            this.props = nextProps;\r\n            this.state = nextState;\r\n            this.context = context;\r\n        }\r\n    }\r\n    return NO_OP;\r\n};\r\n// tslint:disable-next-line:no-empty\r\nComponent.prototype.render = function render (nextProps, nextState, nextContext) { };\n\nexports['default'] = Component;\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// app-bundle.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 22a8796db52361b4d4a1","module.exports = require('./dist').default;\nmodule.exports.default = module.exports;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/inferno/index.js\n// module id = 0\n// module chunks = 0","import { render, version } from 'inferno';\r\nimport Component from 'inferno-component';\r\n\r\nimport { MyInterface } from './interfaces';\r\n\r\nclass App extends Component<any, any> implements MyInterface {\r\n\r\n    public title: string = \"Inferno TypeScript Webpack Example\";\r\n\r\n    private description: string = \"This repo demonstrates how to set up an Inferno app with TypeScript and Webpack.\";\r\n\r\n\tconstructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            data: \"some data\"\r\n        }\r\n        \r\n        this.testSpreadOperator();\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n                <h1>{ this.title }</h1>\r\n\t\t\t\t<h2>{ `Welcome to Inferno ${ version }` }</h2>\r\n                <p>{ this.description }</p>\r\n                <p>{ this.state.data }</p>\r\n\t\t\t</div>\r\n\t\t);\r\n    }\r\n    \r\n    public testSpreadOperator() {\r\n        let friends: string[] = [\"Zico\", \"Jack\", \"Rose\"];\r\n        let people: string[] = [\"Daniel\", \"Toby\", ...friends];\r\n\r\n        console.log(people);\r\n    }\r\n}\r\n\r\nrender(<App />, document.getElementById('app'));\n\n\n// WEBPACK FOOTER //\n// ./src/app.tsx","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\r\n * @module Inferno-Shared\r\n */ /** TypeDoc Comment */\r\nvar NO_OP = \"$NO_OP\";\r\nvar ERROR_MSG = \"a runtime error occured! Use Inferno in development environment to find the error.\";\r\n// This should be boolean and not reference to window.document\r\nvar isBrowser = !!(typeof window !== \"undefined\" && window.document);\r\n// this is MUCH faster than .constructor === Array and instanceof Array\r\n// in Node 7 and the later versions of V8, slower in older versions though\r\nvar isArray = Array.isArray;\r\nfunction isStatefulComponent(o) {\r\n    return !isUndefined(o.prototype) && !isUndefined(o.prototype.render);\r\n}\r\nfunction isStringOrNumber(o) {\r\n    var type = typeof o;\r\n    return type === \"string\" || type === \"number\";\r\n}\r\nfunction isNullOrUndef(o) {\r\n    return isUndefined(o) || isNull(o);\r\n}\r\nfunction isInvalid(o) {\r\n    return isNull(o) || o === false || isTrue(o) || isUndefined(o);\r\n}\r\nfunction isFunction(o) {\r\n    return typeof o === \"function\";\r\n}\r\nfunction isString(o) {\r\n    return typeof o === \"string\";\r\n}\r\nfunction isNumber(o) {\r\n    return typeof o === \"number\";\r\n}\r\nfunction isNull(o) {\r\n    return o === null;\r\n}\r\nfunction isTrue(o) {\r\n    return o === true;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === void 0;\r\n}\r\nfunction isObject(o) {\r\n    return typeof o === \"object\";\r\n}\r\nfunction throwError(message) {\r\n    if (!message) {\r\n        message = ERROR_MSG;\r\n    }\r\n    throw new Error((\"Inferno Error: \" + message));\r\n}\r\nfunction warning(message) {\r\n    // tslint:disable-next-line:no-console\r\n    console.warn(message);\r\n}\r\nfunction combineFrom(first, second) {\r\n    var out = {};\r\n    if (first) {\r\n        for (var key in first) {\r\n            out[key] = first[key];\r\n        }\r\n    }\r\n    if (second) {\r\n        for (var key$1 in second) {\r\n            out[key$1] = second[key$1];\r\n        }\r\n    }\r\n    return out;\r\n}\r\nfunction Lifecycle() {\r\n    this.listeners = [];\r\n}\r\nLifecycle.prototype.addListener = function addListener(callback) {\r\n    this.listeners.push(callback);\r\n};\r\nLifecycle.prototype.trigger = function trigger() {\r\n    var listeners = this.listeners;\r\n    var listener;\r\n    // We need to remove current listener from array when calling it, because more listeners might be added\r\n    while ((listener = listeners.shift())) {\r\n        listener();\r\n    }\r\n};\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar options = {\r\n    afterMount: null,\r\n    afterRender: null,\r\n    afterUpdate: null,\r\n    beforeRender: null,\r\n    beforeUnmount: null,\r\n    createVNode: null,\r\n    findDOMNodeEnabled: false,\r\n    recyclingEnabled: false,\r\n    roots: []\r\n};\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar xlinkNS = \"http://www.w3.org/1999/xlink\";\r\nvar xmlNS = \"http://www.w3.org/XML/1998/namespace\";\r\nvar svgNS = \"http://www.w3.org/2000/svg\";\r\nvar strictProps = new Set();\r\nstrictProps.add(\"volume\");\r\nstrictProps.add(\"defaultChecked\");\r\nvar booleanProps = new Set();\r\nbooleanProps.add(\"muted\");\r\nbooleanProps.add(\"scoped\");\r\nbooleanProps.add(\"loop\");\r\nbooleanProps.add(\"open\");\r\nbooleanProps.add(\"checked\");\r\nbooleanProps.add(\"default\");\r\nbooleanProps.add(\"capture\");\r\nbooleanProps.add(\"disabled\");\r\nbooleanProps.add(\"readOnly\");\r\nbooleanProps.add(\"required\");\r\nbooleanProps.add(\"autoplay\");\r\nbooleanProps.add(\"controls\");\r\nbooleanProps.add(\"seamless\");\r\nbooleanProps.add(\"reversed\");\r\nbooleanProps.add(\"allowfullscreen\");\r\nbooleanProps.add(\"novalidate\");\r\nbooleanProps.add(\"hidden\");\r\nbooleanProps.add(\"autoFocus\");\r\nbooleanProps.add(\"selected\");\r\nbooleanProps.add(\"indeterminate\");\r\nvar namespaces = new Map();\r\nnamespaces.set(\"xlink:href\", xlinkNS);\r\nnamespaces.set(\"xlink:arcrole\", xlinkNS);\r\nnamespaces.set(\"xlink:actuate\", xlinkNS);\r\nnamespaces.set(\"xlink:show\", xlinkNS);\r\nnamespaces.set(\"xlink:role\", xlinkNS);\r\nnamespaces.set(\"xlink:title\", xlinkNS);\r\nnamespaces.set(\"xlink:type\", xlinkNS);\r\nnamespaces.set(\"xml:base\", xmlNS);\r\nnamespaces.set(\"xml:lang\", xmlNS);\r\nnamespaces.set(\"xml:space\", xmlNS);\r\nvar isUnitlessNumber = new Set();\r\nisUnitlessNumber.add(\"animationIterationCount\");\r\nisUnitlessNumber.add(\"borderImageOutset\");\r\nisUnitlessNumber.add(\"borderImageSlice\");\r\nisUnitlessNumber.add(\"borderImageWidth\");\r\nisUnitlessNumber.add(\"boxFlex\");\r\nisUnitlessNumber.add(\"boxFlexGroup\");\r\nisUnitlessNumber.add(\"boxOrdinalGroup\");\r\nisUnitlessNumber.add(\"columnCount\");\r\nisUnitlessNumber.add(\"flex\");\r\nisUnitlessNumber.add(\"flexGrow\");\r\nisUnitlessNumber.add(\"flexPositive\");\r\nisUnitlessNumber.add(\"flexShrink\");\r\nisUnitlessNumber.add(\"flexNegative\");\r\nisUnitlessNumber.add(\"flexOrder\");\r\nisUnitlessNumber.add(\"gridRow\");\r\nisUnitlessNumber.add(\"gridColumn\");\r\nisUnitlessNumber.add(\"fontWeight\");\r\nisUnitlessNumber.add(\"lineClamp\");\r\nisUnitlessNumber.add(\"lineHeight\");\r\nisUnitlessNumber.add(\"opacity\");\r\nisUnitlessNumber.add(\"order\");\r\nisUnitlessNumber.add(\"orphans\");\r\nisUnitlessNumber.add(\"tabSize\");\r\nisUnitlessNumber.add(\"widows\");\r\nisUnitlessNumber.add(\"zIndex\");\r\nisUnitlessNumber.add(\"zoom\");\r\nisUnitlessNumber.add(\"fillOpacity\");\r\nisUnitlessNumber.add(\"floodOpacity\");\r\nisUnitlessNumber.add(\"stopOpacity\");\r\nisUnitlessNumber.add(\"strokeDasharray\");\r\nisUnitlessNumber.add(\"strokeDashoffset\");\r\nisUnitlessNumber.add(\"strokeMiterlimit\");\r\nisUnitlessNumber.add(\"strokeOpacity\");\r\nisUnitlessNumber.add(\"strokeWidth\");\r\nvar skipProps = new Set();\r\nskipProps.add(\"children\");\r\nskipProps.add(\"childrenType\");\r\nskipProps.add(\"defaultValue\");\r\nskipProps.add(\"ref\");\r\nskipProps.add(\"key\");\r\nskipProps.add(\"checked\");\r\nskipProps.add(\"multiple\");\r\nvar delegatedEvents = new Set();\r\ndelegatedEvents.add(\"onClick\");\r\ndelegatedEvents.add(\"onMouseDown\");\r\ndelegatedEvents.add(\"onMouseUp\");\r\ndelegatedEvents.add(\"onMouseMove\");\r\ndelegatedEvents.add(\"onSubmit\");\r\ndelegatedEvents.add(\"onDblClick\");\r\ndelegatedEvents.add(\"onKeyDown\");\r\ndelegatedEvents.add(\"onKeyUp\");\r\ndelegatedEvents.add(\"onKeyPress\");\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar isiOS = isBrowser &&\r\n    !!navigator.platform &&\r\n    /iPad|iPhone|iPod/.test(navigator.platform);\r\nvar delegatedEvents$1 = new Map();\r\nfunction handleEvent(name, lastEvent, nextEvent, dom) {\r\n    var delegatedRoots = delegatedEvents$1.get(name);\r\n    if (nextEvent) {\r\n        if (!delegatedRoots) {\r\n            delegatedRoots = { items: new Map(), docEvent: null };\r\n            delegatedRoots.docEvent = attachEventToDocument(name, delegatedRoots);\r\n            delegatedEvents$1.set(name, delegatedRoots);\r\n        }\r\n        if (!lastEvent) {\r\n            if (isiOS && name === \"onClick\") {\r\n                trapClickOnNonInteractiveElement(dom);\r\n            }\r\n        }\r\n        delegatedRoots.items.set(dom, nextEvent);\r\n    }\r\n    else if (delegatedRoots) {\r\n        var items = delegatedRoots.items;\r\n        if (items.delete(dom)) {\r\n            // If any items were deleted, check if listener need to be removed\r\n            if (items.size === 0) {\r\n                document.removeEventListener(normalizeEventName(name), delegatedRoots.docEvent);\r\n                delegatedEvents$1.delete(name);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction dispatchEvents(event, target, items, count, isClick, eventData) {\r\n    var dom = target;\r\n    while (count > 0) {\r\n        var eventsToTrigger = items.get(dom);\r\n        if (eventsToTrigger) {\r\n            count--;\r\n            // linkEvent object\r\n            eventData.dom = dom;\r\n            if (eventsToTrigger.event) {\r\n                eventsToTrigger.event(eventsToTrigger.data, event);\r\n            }\r\n            else {\r\n                eventsToTrigger(event);\r\n            }\r\n            if (event.cancelBubble) {\r\n                return;\r\n            }\r\n        }\r\n        dom = dom.parentNode;\r\n        // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,\r\n        // because the event listener is on document.body\r\n        // Don't process clicks on disabled elements\r\n        if (dom === null || (isClick && dom.disabled)) {\r\n            return;\r\n        }\r\n    }\r\n}\r\nfunction normalizeEventName(name) {\r\n    return name.substr(2).toLowerCase();\r\n}\r\nfunction stopPropagation() {\r\n    this.cancelBubble = true;\r\n    this.stopImmediatePropagation();\r\n}\r\nfunction attachEventToDocument(name, delegatedRoots) {\r\n    var docEvent = function (event) {\r\n        var count = delegatedRoots.items.size;\r\n        if (count > 0) {\r\n            event.stopPropagation = stopPropagation;\r\n            // Event data needs to be object to save reference to currentTarget getter\r\n            var eventData = {\r\n                dom: document\r\n            };\r\n            try {\r\n                Object.defineProperty(event, \"currentTarget\", {\r\n                    configurable: true,\r\n                    get: function get() {\r\n                        return eventData.dom;\r\n                    }\r\n                });\r\n            }\r\n            catch (e) {\r\n                /* safari7 and phantomJS will crash */\r\n            }\r\n            dispatchEvents(event, event.target, delegatedRoots.items, count, event.type === \"click\", eventData);\r\n        }\r\n    };\r\n    document.addEventListener(normalizeEventName(name), docEvent);\r\n    return docEvent;\r\n}\r\n// tslint:disable-next-line:no-empty\r\nfunction emptyFn() { }\r\nfunction trapClickOnNonInteractiveElement(dom) {\r\n    // Mobile Safari does not fire properly bubble click events on\r\n    // non-interactive elements, which means delegated click listeners do not\r\n    // fire. The workaround for this bug involves attaching an empty click\r\n    // listener on the target node.\r\n    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\r\n    // Just set it using the onclick property so that we don't have to manage any\r\n    // bookkeeping for it. Not sure if we need to clear it when the listener is\r\n    // removed.\r\n    // TODO: Only do this for the relevant Safaris maybe?\r\n    dom.onclick = emptyFn;\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction isCheckedType(type) {\r\n    return type === \"checkbox\" || type === \"radio\";\r\n}\r\nfunction onTextInputChange(e) {\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    var previousValue = props.value;\r\n    if (props.onInput) {\r\n        var event = props.onInput;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.oninput) {\r\n        props.oninput(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    if (previousValue !== newProps.value) {\r\n        // When this happens we need to store current cursor position and restore it, to avoid jumping\r\n        applyValue(newProps, dom);\r\n    }\r\n}\r\nfunction wrappedOnChange(e) {\r\n    var props = this.vNode.props || EMPTY_OBJ;\r\n    var event = props.onChange;\r\n    if (event.event) {\r\n        event.event(event.data, e);\r\n    }\r\n    else {\r\n        event(e);\r\n    }\r\n}\r\nfunction onCheckboxChange(e) {\r\n    e.stopPropagation(); // This click should not propagate its for internal use\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    if (props.onClick) {\r\n        var event = props.onClick;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.onclick) {\r\n        props.onclick(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    applyValue(newProps, dom);\r\n}\r\nfunction processInput(vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    applyValue(nextPropsOrEmpty, dom);\r\n    if (isControlled) {\r\n        dom.vNode = vNode; // TODO: Remove this when implementing Fiber's\r\n        if (mounting) {\r\n            if (isCheckedType(nextPropsOrEmpty.type)) {\r\n                dom.onclick = onCheckboxChange;\r\n                dom.onclick.wrapped = true;\r\n            }\r\n            else {\r\n                dom.oninput = onTextInputChange;\r\n                dom.oninput.wrapped = true;\r\n            }\r\n            if (nextPropsOrEmpty.onChange) {\r\n                dom.onchange = wrappedOnChange;\r\n                dom.onchange.wrapped = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction applyValue(nextPropsOrEmpty, dom) {\r\n    var type = nextPropsOrEmpty.type;\r\n    var value = nextPropsOrEmpty.value;\r\n    var checked = nextPropsOrEmpty.checked;\r\n    var multiple = nextPropsOrEmpty.multiple;\r\n    var defaultValue = nextPropsOrEmpty.defaultValue;\r\n    var hasValue = !isNullOrUndef(value);\r\n    if (type && type !== dom.type) {\r\n        dom.setAttribute(\"type\", type);\r\n    }\r\n    if (multiple && multiple !== dom.multiple) {\r\n        dom.multiple = multiple;\r\n    }\r\n    if (!isNullOrUndef(defaultValue) && !hasValue) {\r\n        dom.defaultValue = defaultValue + \"\";\r\n    }\r\n    if (isCheckedType(type)) {\r\n        if (hasValue) {\r\n            dom.value = value;\r\n        }\r\n        if (!isNullOrUndef(checked)) {\r\n            dom.checked = checked;\r\n        }\r\n    }\r\n    else {\r\n        if (hasValue && dom.value !== value) {\r\n            dom.defaultValue = value;\r\n            dom.value = value;\r\n        }\r\n        else if (!isNullOrUndef(checked)) {\r\n            dom.checked = checked;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction updateChildOptionGroup(vNode, value) {\r\n    var type = vNode.type;\r\n    if (type === \"optgroup\") {\r\n        var children = vNode.children;\r\n        if (isArray(children)) {\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                updateChildOption(children[i], value);\r\n            }\r\n        }\r\n        else if (isVNode(children)) {\r\n            updateChildOption(children, value);\r\n        }\r\n    }\r\n    else {\r\n        updateChildOption(vNode, value);\r\n    }\r\n}\r\nfunction updateChildOption(vNode, value) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    // we do this as multiple may have changed\r\n    dom.value = props.value;\r\n    if ((isArray(value) && value.indexOf(props.value) !== -1) ||\r\n        props.value === value) {\r\n        dom.selected = true;\r\n    }\r\n    else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {\r\n        dom.selected = props.selected || false;\r\n    }\r\n}\r\nfunction onSelectChange(e) {\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    var previousValue = props.value;\r\n    if (props.onChange) {\r\n        var event = props.onChange;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.onchange) {\r\n        props.onchange(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    if (previousValue !== newProps.value) {\r\n        // When this happens we need to store current cursor position and restore it, to avoid jumping\r\n        applyValue$1(newVNode, dom, newProps, false);\r\n    }\r\n}\r\nfunction processSelect(vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    applyValue$1(vNode, dom, nextPropsOrEmpty, mounting);\r\n    if (isControlled) {\r\n        dom.vNode = vNode; // TODO: Remove this when implementing Fiber's\r\n        if (mounting) {\r\n            dom.onchange = onSelectChange;\r\n            dom.onchange.wrapped = true;\r\n        }\r\n    }\r\n}\r\nfunction applyValue$1(vNode, dom, nextPropsOrEmpty, mounting) {\r\n    if (nextPropsOrEmpty.multiple !== dom.multiple) {\r\n        dom.multiple = nextPropsOrEmpty.multiple;\r\n    }\r\n    var children = vNode.children;\r\n    if (!isInvalid(children)) {\r\n        var value = nextPropsOrEmpty.value;\r\n        if (mounting && isNullOrUndef(value)) {\r\n            value = nextPropsOrEmpty.defaultValue;\r\n        }\r\n        if (isArray(children)) {\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                updateChildOptionGroup(children[i], value);\r\n            }\r\n        }\r\n        else if (isVNode(children)) {\r\n            updateChildOptionGroup(children, value);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction wrappedOnChange$1(e) {\r\n    var props = this.vNode.props || EMPTY_OBJ;\r\n    var event = props.onChange;\r\n    if (event.event) {\r\n        event.event(event.data, e);\r\n    }\r\n    else {\r\n        event(e);\r\n    }\r\n}\r\nfunction onTextareaInputChange(e) {\r\n    var vNode = this.vNode;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var previousValue = props.value;\r\n    if (props.onInput) {\r\n        var event = props.onInput;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (props.oninput) {\r\n        props.oninput(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events syncronously\r\n    // so we need to get it from the context of `this` again\r\n    var newVNode = this.vNode;\r\n    var newProps = newVNode.props || EMPTY_OBJ;\r\n    // If render is going async there is no value change yet, it will come back to process input soon\r\n    if (previousValue !== newProps.value) {\r\n        // When this happens we need to store current cursor position and restore it, to avoid jumping\r\n        applyValue$2(newVNode, vNode.dom, false);\r\n    }\r\n}\r\nfunction processTextarea(vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    applyValue$2(nextPropsOrEmpty, dom, mounting);\r\n    if (isControlled) {\r\n        dom.vNode = vNode; // TODO: Remove this when implementing Fiber's\r\n        if (mounting) {\r\n            dom.oninput = onTextareaInputChange;\r\n            dom.oninput.wrapped = true;\r\n            if (nextPropsOrEmpty.onChange) {\r\n                dom.onchange = wrappedOnChange$1;\r\n                dom.onchange.wrapped = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction applyValue$2(nextPropsOrEmpty, dom, mounting) {\r\n    var value = nextPropsOrEmpty.value;\r\n    var domValue = dom.value;\r\n    if (isNullOrUndef(value)) {\r\n        if (mounting) {\r\n            var defaultValue = nextPropsOrEmpty.defaultValue;\r\n            if (!isNullOrUndef(defaultValue)) {\r\n                if (defaultValue !== domValue) {\r\n                    dom.defaultValue = defaultValue;\r\n                    dom.value = defaultValue;\r\n                }\r\n            }\r\n            else if (domValue !== \"\") {\r\n                dom.defaultValue = \"\";\r\n                dom.value = \"\";\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        /* There is value so keep it controlled */\r\n        if (domValue !== value) {\r\n            dom.defaultValue = value;\r\n            dom.value = value;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n/**\r\n * There is currently no support for switching same input between controlled and nonControlled\r\n * If that ever becomes a real issue, then re design controlled elements\r\n * Currently user must choose either controlled or non-controlled and stick with that\r\n */\r\nfunction processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\r\n    if (flags & 512 /* InputElement */) {\r\n        processInput(vNode, dom, nextPropsOrEmpty, mounting, isControlled);\r\n    }\r\n    if (flags & 2048 /* SelectElement */) {\r\n        processSelect(vNode, dom, nextPropsOrEmpty, mounting, isControlled);\r\n    }\r\n    if (flags & 1024 /* TextareaElement */) {\r\n        processTextarea(vNode, dom, nextPropsOrEmpty, mounting, isControlled);\r\n    }\r\n}\r\nfunction isControlledFormElement(nextPropsOrEmpty) {\r\n    return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type)\r\n        ? !isNullOrUndef(nextPropsOrEmpty.checked)\r\n        : !isNullOrUndef(nextPropsOrEmpty.value);\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction normalizeChildNodes(parentDom) {\r\n    var dom = parentDom.firstChild;\r\n    while (dom) {\r\n        if (dom.nodeType === 8) {\r\n            if (dom.data === \"!\") {\r\n                var placeholder = document.createTextNode(\"\");\r\n                parentDom.replaceChild(placeholder, dom);\r\n                dom = dom.nextSibling;\r\n            }\r\n            else {\r\n                var lastDom = dom.previousSibling;\r\n                parentDom.removeChild(dom);\r\n                dom = lastDom || parentDom.firstChild;\r\n            }\r\n        }\r\n        else {\r\n            dom = dom.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction hydrateComponent(vNode, dom, lifecycle, context, isSVG, isClass) {\r\n    var type = vNode.type;\r\n    var ref = vNode.ref;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    if (isClass) {\r\n        var _isSVG = dom.namespaceURI === svgNS;\r\n        var instance = createClassComponentInstance(vNode, type, props, context, _isSVG, lifecycle);\r\n        var input = instance._lastInput;\r\n        instance._vNode = vNode;\r\n        hydrate(input, dom, lifecycle, instance._childContext, _isSVG);\r\n        vNode.dom = input.dom;\r\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\r\n        instance._updating = false; // Mount finished allow going sync\r\n        if (options.findDOMNodeEnabled) {\r\n            componentToDOMNodeMap.set(instance, dom);\r\n        }\r\n    }\r\n    else {\r\n        var input$1 = createFunctionalComponentInput(vNode, type, props, context);\r\n        hydrate(input$1, dom, lifecycle, context, isSVG);\r\n        vNode.children = input$1;\r\n        vNode.dom = input$1.dom;\r\n        mountFunctionalComponentCallbacks(props, ref, dom, lifecycle);\r\n    }\r\n    return dom;\r\n}\r\nfunction hydrateElement(vNode, dom, lifecycle, context, isSVG) {\r\n    var children = vNode.children;\r\n    var props = vNode.props;\r\n    var className = vNode.className;\r\n    var flags = vNode.flags;\r\n    var ref = vNode.ref;\r\n    isSVG = isSVG || (flags & 128 /* SvgElement */) > 0;\r\n    if (dom.nodeType !== 1 || dom.tagName.toLowerCase() !== vNode.type) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            warning(\"Inferno hydration: Server-side markup doesn't match client-side markup or Initial render target is not empty\");\r\n        }\r\n        var newDom = mountElement(vNode, null, lifecycle, context, isSVG);\r\n        vNode.dom = newDom;\r\n        replaceChild(dom.parentNode, newDom, dom);\r\n        return newDom;\r\n    }\r\n    vNode.dom = dom;\r\n    if (!isInvalid(children)) {\r\n        hydrateChildren(children, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (dom.firstChild !== null && !isSamePropsInnerHTML(dom, props)) {\r\n        dom.textContent = \"\"; // dom has content, but VNode has no children remove everything from DOM\r\n    }\r\n    if (props) {\r\n        var hasControlledValue = false;\r\n        var isFormElement = (flags & 3584 /* FormElement */) > 0;\r\n        if (isFormElement) {\r\n            hasControlledValue = isControlledFormElement(props);\r\n        }\r\n        for (var prop in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\r\n        }\r\n        if (isFormElement) {\r\n            processElement(flags, vNode, dom, props, true, hasControlledValue);\r\n        }\r\n    }\r\n    if (!isNullOrUndef(className)) {\r\n        if (isSVG) {\r\n            dom.setAttribute(\"class\", className);\r\n        }\r\n        else {\r\n            dom.className = className;\r\n        }\r\n    }\r\n    else {\r\n        if (dom.className !== \"\") {\r\n            dom.removeAttribute(\"class\");\r\n        }\r\n    }\r\n    if (ref) {\r\n        mountRef(dom, ref, lifecycle);\r\n    }\r\n    return dom;\r\n}\r\nfunction hydrateChildren(children, parentDom, lifecycle, context, isSVG) {\r\n    normalizeChildNodes(parentDom);\r\n    var dom = parentDom.firstChild;\r\n    if (isStringOrNumber(children)) {\r\n        if (!isNull(dom) && dom.nodeType === 3) {\r\n            if (dom.nodeValue !== children) {\r\n                dom.nodeValue = children;\r\n            }\r\n        }\r\n        else if (children === \"\") {\r\n            parentDom.appendChild(document.createTextNode(\"\"));\r\n        }\r\n        else {\r\n            parentDom.textContent = children;\r\n        }\r\n        if (!isNull(dom)) {\r\n            dom = dom.nextSibling;\r\n        }\r\n    }\r\n    else if (isArray(children)) {\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            if (!isNull(child) && isObject(child)) {\r\n                if (!isNull(dom)) {\r\n                    var nextSibling = dom.nextSibling;\r\n                    hydrate(child, dom, lifecycle, context, isSVG);\r\n                    dom = nextSibling;\r\n                }\r\n                else {\r\n                    mount(child, parentDom, lifecycle, context, isSVG);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // It's VNode\r\n        if (!isNull(dom)) {\r\n            hydrate(children, dom, lifecycle, context, isSVG);\r\n            dom = dom.nextSibling;\r\n        }\r\n        else {\r\n            mount(children, parentDom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    // clear any other DOM nodes, there should be only a single entry for the root\r\n    while (dom) {\r\n        var nextSibling$1 = dom.nextSibling;\r\n        parentDom.removeChild(dom);\r\n        dom = nextSibling$1;\r\n    }\r\n}\r\nfunction hydrateText(vNode, dom) {\r\n    if (dom.nodeType !== 3) {\r\n        var newDom = mountText(vNode, null);\r\n        vNode.dom = newDom;\r\n        replaceChild(dom.parentNode, newDom, dom);\r\n        return newDom;\r\n    }\r\n    var text = vNode.children;\r\n    if (dom.nodeValue !== text) {\r\n        dom.nodeValue = text;\r\n    }\r\n    vNode.dom = dom;\r\n    return dom;\r\n}\r\nfunction hydrateVoid(vNode, dom) {\r\n    vNode.dom = dom;\r\n    return dom;\r\n}\r\nfunction hydrate(vNode, dom, lifecycle, context, isSVG) {\r\n    var flags = vNode.flags;\r\n    if (flags & 28 /* Component */) {\r\n        hydrateComponent(vNode, dom, lifecycle, context, isSVG, (flags & 4 /* ComponentClass */) > 0);\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        hydrateElement(vNode, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        hydrateText(vNode, dom);\r\n    }\r\n    else if (flags & 4096 /* Void */) {\r\n        hydrateVoid(vNode, dom);\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError((\"hydrate() expects a valid VNode, instead it received an object with the type \\\"\" + (typeof vNode) + \"\\\".\"));\r\n        }\r\n        throwError();\r\n    }\r\n}\r\nfunction hydrateRoot(input, parentDom, lifecycle) {\r\n    if (!isNull(parentDom)) {\r\n        var dom = parentDom.firstChild;\r\n        if (!isNull(dom)) {\r\n            hydrate(input, dom, lifecycle, EMPTY_OBJ, false);\r\n            dom = parentDom.firstChild;\r\n            // clear any other DOM nodes, there should be only a single entry for the root\r\n            while ((dom = dom.nextSibling)) {\r\n                parentDom.removeChild(dom);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nvar componentPools = new Map();\r\nvar elementPools = new Map();\r\nfunction recycleElement(vNode, lifecycle, context, isSVG) {\r\n    var tag = vNode.type;\r\n    var pools = elementPools.get(tag);\r\n    if (!isUndefined(pools)) {\r\n        var key = vNode.key;\r\n        var pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\r\n        if (!isUndefined(pool)) {\r\n            var recycledVNode = pool.pop();\r\n            if (!isUndefined(recycledVNode)) {\r\n                patchElement(recycledVNode, vNode, null, lifecycle, context, isSVG, true);\r\n                return vNode.dom;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction poolElement(vNode) {\r\n    var tag = vNode.type;\r\n    var key = vNode.key;\r\n    var pools = elementPools.get(tag);\r\n    if (isUndefined(pools)) {\r\n        pools = {\r\n            keyed: new Map(),\r\n            nonKeyed: []\r\n        };\r\n        elementPools.set(tag, pools);\r\n    }\r\n    if (isNull(key)) {\r\n        pools.nonKeyed.push(vNode);\r\n    }\r\n    else {\r\n        var pool = pools.keyed.get(key);\r\n        if (isUndefined(pool)) {\r\n            pool = [];\r\n            pools.keyed.set(key, pool);\r\n        }\r\n        pool.push(vNode);\r\n    }\r\n}\r\nfunction recycleComponent(vNode, lifecycle, context, isSVG) {\r\n    var type = vNode.type;\r\n    var pools = componentPools.get(type);\r\n    if (!isUndefined(pools)) {\r\n        var key = vNode.key;\r\n        var pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\r\n        if (!isUndefined(pool)) {\r\n            var recycledVNode = pool.pop();\r\n            if (!isUndefined(recycledVNode)) {\r\n                var flags = vNode.flags;\r\n                var failed = patchComponent(recycledVNode, vNode, null, lifecycle, context, isSVG, (flags & 4 /* ComponentClass */) > 0, true);\r\n                if (!failed) {\r\n                    return vNode.dom;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction poolComponent(vNode) {\r\n    var hooks = vNode.ref;\r\n    var nonRecycleHooks = hooks &&\r\n        (hooks.onComponentWillMount ||\r\n            hooks.onComponentWillUnmount ||\r\n            hooks.onComponentDidMount ||\r\n            hooks.onComponentWillUpdate ||\r\n            hooks.onComponentDidUpdate);\r\n    if (nonRecycleHooks) {\r\n        return;\r\n    }\r\n    var type = vNode.type;\r\n    var key = vNode.key;\r\n    var pools = componentPools.get(type);\r\n    if (isUndefined(pools)) {\r\n        pools = {\r\n            keyed: new Map(),\r\n            nonKeyed: []\r\n        };\r\n        componentPools.set(type, pools);\r\n    }\r\n    if (isNull(key)) {\r\n        pools.nonKeyed.push(vNode);\r\n    }\r\n    else {\r\n        var pool = pools.keyed.get(key);\r\n        if (isUndefined(pool)) {\r\n            pool = [];\r\n            pools.keyed.set(key, pool);\r\n        }\r\n        pool.push(vNode);\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction unmount(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var flags = vNode.flags;\r\n    if (flags & 28 /* Component */) {\r\n        unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling);\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling);\r\n    }\r\n    else if (flags & (1 /* Text */ | 4096 /* Void */)) {\r\n        unmountVoidOrText(vNode, parentDom);\r\n    }\r\n}\r\nfunction unmountVoidOrText(vNode, parentDom) {\r\n    if (!isNull(parentDom)) {\r\n        removeChild(parentDom, vNode.dom);\r\n    }\r\n}\r\nfunction unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var instance = vNode.children;\r\n    var flags = vNode.flags;\r\n    var isStatefulComponent$$1 = flags & 4;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var ref = vNode.ref;\r\n    var dom = vNode.dom;\r\n    if (!isRecycling) {\r\n        if (isStatefulComponent$$1) {\r\n            if (!instance._unmounted) {\r\n                if (!isNull(options.beforeUnmount)) {\r\n                    options.beforeUnmount(vNode);\r\n                }\r\n                if (!isUndefined(instance.componentWillUnmount)) {\r\n                    instance.componentWillUnmount();\r\n                }\r\n                if (ref && !isRecycling) {\r\n                    ref(null);\r\n                }\r\n                instance._unmounted = true;\r\n                if (options.findDOMNodeEnabled) {\r\n                    componentToDOMNodeMap.delete(instance);\r\n                }\r\n                unmount(instance._lastInput, null, instance._lifecycle, false, isRecycling);\r\n            }\r\n        }\r\n        else {\r\n            if (!isNullOrUndef(ref)) {\r\n                if (!isNullOrUndef(ref.onComponentWillUnmount)) {\r\n                    ref.onComponentWillUnmount(dom, props);\r\n                }\r\n            }\r\n            unmount(instance, null, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n    if (parentDom) {\r\n        removeChild(parentDom, dom);\r\n    }\r\n    if (options.recyclingEnabled &&\r\n        !isStatefulComponent$$1 &&\r\n        (parentDom || canRecycle)) {\r\n        poolComponent(vNode);\r\n    }\r\n}\r\nfunction unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var dom = vNode.dom;\r\n    var ref = vNode.ref;\r\n    var props = vNode.props;\r\n    if (ref && !isRecycling) {\r\n        unmountRef(ref);\r\n    }\r\n    var children = vNode.children;\r\n    if (!isNullOrUndef(children)) {\r\n        unmountChildren$1(children, lifecycle, isRecycling);\r\n    }\r\n    if (!isNull(props)) {\r\n        for (var name in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            if (props[name] !== null && isAttrAnEvent(name)) {\r\n                patchEvent(name, props[name], null, dom);\r\n                // We need to set this null, because same props otherwise come back if SCU returns false and we are recyling\r\n                props[name] = null;\r\n            }\r\n        }\r\n    }\r\n    if (!isNull(parentDom)) {\r\n        removeChild(parentDom, dom);\r\n    }\r\n    if (options.recyclingEnabled && (parentDom || canRecycle)) {\r\n        poolElement(vNode);\r\n    }\r\n}\r\nfunction unmountChildren$1(children, lifecycle, isRecycling) {\r\n    if (isArray(children)) {\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            if (!isInvalid(child) && isObject(child)) {\r\n                unmount(child, null, lifecycle, false, isRecycling);\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(children)) {\r\n        unmount(children, null, lifecycle, false, isRecycling);\r\n    }\r\n}\r\nfunction unmountRef(ref) {\r\n    if (isFunction(ref)) {\r\n        ref(null);\r\n    }\r\n    else {\r\n        if (isInvalid(ref)) {\r\n            return;\r\n        }\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n        }\r\n        throwError();\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n// rather than use a Map, like we did before, we can use an array here\r\n// given there shouldn't be THAT many roots on the page, the difference\r\n// in performance is huge: https://esbench.com/bench/5802a691330ab09900a1a2da\r\nvar componentToDOMNodeMap = new Map();\r\nvar roots = options.roots;\r\n/**\r\n * When inferno.options.findDOMNOdeEnabled is true, this function will return DOM Node by component instance\r\n * @param ref Component instance\r\n * @returns {*|null} returns dom node\r\n */\r\nfunction findDOMNode(ref) {\r\n    if (!options.findDOMNodeEnabled) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError(\"findDOMNode() has been disabled, use Inferno.options.findDOMNodeEnabled = true; enabled findDOMNode(). Warning this can significantly impact performance!\");\r\n        }\r\n        throwError();\r\n    }\r\n    var dom = ref && ref.nodeType ? ref : null;\r\n    return componentToDOMNodeMap.get(ref) || dom;\r\n}\r\nfunction getRoot(dom) {\r\n    for (var i = 0, len = roots.length; i < len; i++) {\r\n        var root = roots[i];\r\n        if (root.dom === dom) {\r\n            return root;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction setRoot(dom, input, lifecycle) {\r\n    var root = {\r\n        dom: dom,\r\n        input: input,\r\n        lifecycle: lifecycle\r\n    };\r\n    roots.push(root);\r\n    return root;\r\n}\r\nfunction removeRoot(root) {\r\n    for (var i = 0, len = roots.length; i < len; i++) {\r\n        if (roots[i] === root) {\r\n            roots.splice(i, 1);\r\n            return;\r\n        }\r\n    }\r\n}\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    if (isBrowser && document.body === null) {\r\n        warning('Inferno warning: you cannot initialize inferno without \"document.body\". Wait on \"DOMContentLoaded\" event, add script to bottom of body, or use async/defer attributes on script tag.');\r\n    }\r\n}\r\nvar documentBody = isBrowser ? document.body : null;\r\n/**\r\n * Renders virtual node tree into parent node.\r\n * @param {VNode | null | string | number} input vNode to be rendered\r\n * @param parentDom DOM node which content will be replaced by virtual node\r\n * @returns {InfernoChildren} rendered virtual node\r\n */\r\nfunction render(input, parentDom) {\r\n    if (documentBody === parentDom) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError('you cannot render() to the \"document.body\". Use an empty element as a container instead.');\r\n        }\r\n        throwError();\r\n    }\r\n    if (input === NO_OP) {\r\n        return;\r\n    }\r\n    var root = getRoot(parentDom);\r\n    if (isNull(root)) {\r\n        var lifecycle = new Lifecycle();\r\n        if (!isInvalid(input)) {\r\n            if (input.dom) {\r\n                input = directClone(input);\r\n            }\r\n            if (!hydrateRoot(input, parentDom, lifecycle)) {\r\n                mount(input, parentDom, lifecycle, EMPTY_OBJ, false);\r\n            }\r\n            root = setRoot(parentDom, input, lifecycle);\r\n            lifecycle.trigger();\r\n        }\r\n    }\r\n    else {\r\n        var lifecycle$1 = root.lifecycle;\r\n        lifecycle$1.listeners = [];\r\n        if (isNullOrUndef(input)) {\r\n            unmount(root.input, parentDom, lifecycle$1, false, false);\r\n            removeRoot(root);\r\n        }\r\n        else {\r\n            if (input.dom) {\r\n                input = directClone(input);\r\n            }\r\n            patch(root.input, input, parentDom, lifecycle$1, EMPTY_OBJ, false, false);\r\n        }\r\n        root.input = input;\r\n        lifecycle$1.trigger();\r\n    }\r\n    if (root) {\r\n        var rootInput = root.input;\r\n        if (rootInput && rootInput.flags & 28 /* Component */) {\r\n            return rootInput.children;\r\n        }\r\n    }\r\n}\r\nfunction createRenderer(parentDom) {\r\n    return function renderer(lastInput, nextInput) {\r\n        if (!parentDom) {\r\n            parentDom = lastInput;\r\n        }\r\n        render(nextInput, parentDom);\r\n    };\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction patch(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    if (lastVNode !== nextVNode) {\r\n        var lastFlags = lastVNode.flags;\r\n        var nextFlags = nextVNode.flags;\r\n        if (nextFlags & 28 /* Component */) {\r\n            var isClass = (nextFlags & 4 /* ComponentClass */) > 0;\r\n            if (lastFlags & 28 /* Component */) {\r\n                patchComponent(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isClass, isRecycling);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountComponent(nextVNode, null, lifecycle, context, isSVG, isClass), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 3970 /* Element */) {\r\n            if (lastFlags & 3970 /* Element */) {\r\n                patchElement(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountElement(nextVNode, null, lifecycle, context, isSVG), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 1 /* Text */) {\r\n            if (lastFlags & 1 /* Text */) {\r\n                patchText(lastVNode, nextVNode);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountText(nextVNode, null), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 4096 /* Void */) {\r\n            if (lastFlags & 4096 /* Void */) {\r\n                patchVoid(lastVNode, nextVNode);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountVoid(nextVNode, null), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else {\r\n            // Error case: mount new one replacing old one\r\n            replaceLastChildAndUnmount(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction unmountChildren(children, dom, lifecycle, isRecycling) {\r\n    if (isVNode(children)) {\r\n        unmount(children, dom, lifecycle, true, isRecycling);\r\n    }\r\n    else if (isArray(children)) {\r\n        removeAllChildren(dom, children, lifecycle, isRecycling);\r\n    }\r\n    else {\r\n        dom.textContent = \"\";\r\n    }\r\n}\r\nfunction patchElement(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    var nextTag = nextVNode.type;\r\n    var lastTag = lastVNode.type;\r\n    if (lastTag !== nextTag) {\r\n        replaceWithNewNode(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n    }\r\n    else {\r\n        var dom = lastVNode.dom;\r\n        var lastProps = lastVNode.props;\r\n        var nextProps = nextVNode.props;\r\n        var lastChildren = lastVNode.children;\r\n        var nextChildren = nextVNode.children;\r\n        var lastFlags = lastVNode.flags;\r\n        var nextFlags = nextVNode.flags;\r\n        var nextRef = nextVNode.ref;\r\n        var lastClassName = lastVNode.className;\r\n        var nextClassName = nextVNode.className;\r\n        nextVNode.dom = dom;\r\n        isSVG = isSVG || (nextFlags & 128 /* SvgElement */) > 0;\r\n        if (lastChildren !== nextChildren) {\r\n            var childrenIsSVG = isSVG === true && nextVNode.type !== \"foreignObject\";\r\n            patchChildren(lastFlags, nextFlags, lastChildren, nextChildren, dom, lifecycle, context, childrenIsSVG, isRecycling);\r\n        }\r\n        // inlined patchProps  -- starts --\r\n        if (lastProps !== nextProps) {\r\n            var lastPropsOrEmpty = lastProps || EMPTY_OBJ;\r\n            var nextPropsOrEmpty = nextProps || EMPTY_OBJ;\r\n            var hasControlledValue = false;\r\n            if (nextPropsOrEmpty !== EMPTY_OBJ) {\r\n                var isFormElement = (nextFlags & 3584 /* FormElement */) > 0;\r\n                if (isFormElement) {\r\n                    hasControlledValue = isControlledFormElement(nextPropsOrEmpty);\r\n                }\r\n                for (var prop in nextPropsOrEmpty) {\r\n                    // do not add a hasOwnProperty check here, it affects performance\r\n                    var nextValue = nextPropsOrEmpty[prop];\r\n                    var lastValue = lastPropsOrEmpty[prop];\r\n                    patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue);\r\n                }\r\n                if (isFormElement) {\r\n                    // When inferno is recycling form element, we need to process it like it would be mounting\r\n                    processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, isRecycling, hasControlledValue);\r\n                }\r\n            }\r\n            if (lastPropsOrEmpty !== EMPTY_OBJ) {\r\n                for (var prop$1 in lastPropsOrEmpty) {\r\n                    // do not add a hasOwnProperty check here, it affects performance\r\n                    if (isNullOrUndef(nextPropsOrEmpty[prop$1]) &&\r\n                        !isNullOrUndef(lastPropsOrEmpty[prop$1])) {\r\n                        removeProp(prop$1, lastPropsOrEmpty[prop$1], dom, nextFlags);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // inlined patchProps  -- ends --\r\n        if (lastClassName !== nextClassName) {\r\n            if (isNullOrUndef(nextClassName)) {\r\n                dom.removeAttribute(\"class\");\r\n            }\r\n            else {\r\n                if (isSVG) {\r\n                    dom.setAttribute(\"class\", nextClassName);\r\n                }\r\n                else {\r\n                    dom.className = nextClassName;\r\n                }\r\n            }\r\n        }\r\n        if (nextRef) {\r\n            if (lastVNode.ref !== nextRef || isRecycling) {\r\n                mountRef(dom, nextRef, lifecycle);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchChildren(lastFlags, nextFlags, lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var patchArray = false;\r\n    var patchKeyed = false;\r\n    if (nextFlags & 64 /* HasNonKeyedChildren */) {\r\n        patchArray = true;\r\n    }\r\n    else if ((lastFlags & 32 /* HasKeyedChildren */) > 0 &&\r\n        (nextFlags & 32 /* HasKeyedChildren */) > 0) {\r\n        patchKeyed = true;\r\n        patchArray = true;\r\n    }\r\n    else if (isInvalid(nextChildren)) {\r\n        unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n    }\r\n    else if (isInvalid(lastChildren)) {\r\n        if (isStringOrNumber(nextChildren)) {\r\n            setTextContent(dom, nextChildren);\r\n        }\r\n        else {\r\n            if (isArray(nextChildren)) {\r\n                mountArrayChildren(nextChildren, dom, lifecycle, context, isSVG);\r\n            }\r\n            else {\r\n                mount(nextChildren, dom, lifecycle, context, isSVG);\r\n            }\r\n        }\r\n    }\r\n    else if (isStringOrNumber(nextChildren)) {\r\n        if (isStringOrNumber(lastChildren)) {\r\n            updateTextContent(dom, nextChildren);\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            setTextContent(dom, nextChildren);\r\n        }\r\n    }\r\n    else if (isArray(nextChildren)) {\r\n        if (isArray(lastChildren)) {\r\n            patchArray = true;\r\n            if (isKeyed(lastChildren, nextChildren)) {\r\n                patchKeyed = true;\r\n            }\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            mountArrayChildren(nextChildren, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    else if (isArray(lastChildren)) {\r\n        removeAllChildren(dom, lastChildren, lifecycle, isRecycling);\r\n        mount(nextChildren, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (isVNode(nextChildren)) {\r\n        if (isVNode(lastChildren)) {\r\n            patch(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            mount(nextChildren, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    if (patchArray) {\r\n        if (patchKeyed) {\r\n            patchKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        else {\r\n            patchNonKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction patchComponent(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isClass, isRecycling) {\r\n    var lastType = lastVNode.type;\r\n    var nextType = nextVNode.type;\r\n    var lastKey = lastVNode.key;\r\n    var nextKey = nextVNode.key;\r\n    if (lastType !== nextType || lastKey !== nextKey) {\r\n        replaceWithNewNode(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n        return false;\r\n    }\r\n    else {\r\n        var nextProps = nextVNode.props || EMPTY_OBJ;\r\n        if (isClass) {\r\n            var instance = lastVNode.children;\r\n            instance._updating = true;\r\n            if (instance._unmounted) {\r\n                if (isNull(parentDom)) {\r\n                    return true;\r\n                }\r\n                replaceChild(parentDom, mountComponent(nextVNode, null, lifecycle, context, isSVG, (nextVNode.flags & 4 /* ComponentClass */) > 0), lastVNode.dom);\r\n            }\r\n            else {\r\n                var hasComponentDidUpdate = !isUndefined(instance.componentDidUpdate);\r\n                var nextState = instance.state;\r\n                // When component has componentDidUpdate hook, we need to clone lastState or will be modified by reference during update\r\n                var lastState = hasComponentDidUpdate\r\n                    ? combineFrom(nextState, null)\r\n                    : nextState;\r\n                var lastProps = instance.props;\r\n                nextVNode.children = instance;\r\n                instance._isSVG = isSVG;\r\n                var lastInput = instance._lastInput;\r\n                var nextInput = instance._updateComponent(lastState, nextState, lastProps, nextProps, context, false, false);\r\n                var didUpdate = true;\r\n                // Update component before getting child context\r\n                var childContext;\r\n                if (!isNullOrUndef(instance.getChildContext)) {\r\n                    childContext = instance.getChildContext();\r\n                }\r\n                if (isNullOrUndef(childContext)) {\r\n                    childContext = context;\r\n                }\r\n                else {\r\n                    childContext = combineFrom(context, childContext);\r\n                }\r\n                instance._childContext = childContext;\r\n                if (isInvalid(nextInput)) {\r\n                    nextInput = createVoidVNode();\r\n                }\r\n                else if (nextInput === NO_OP) {\r\n                    nextInput = lastInput;\r\n                    didUpdate = false;\r\n                }\r\n                else if (isStringOrNumber(nextInput)) {\r\n                    nextInput = createTextVNode(nextInput, null);\r\n                }\r\n                else if (isArray(nextInput)) {\r\n                    if (process.env.NODE_ENV !== \"production\") {\r\n                        throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n                    }\r\n                    throwError();\r\n                }\r\n                else if (isObject(nextInput)) {\r\n                    if (!isNull(nextInput.dom)) {\r\n                        nextInput = directClone(nextInput);\r\n                    }\r\n                }\r\n                if (nextInput.flags & 28 /* Component */) {\r\n                    nextInput.parentVNode = nextVNode;\r\n                }\r\n                else if (lastInput.flags & 28 /* Component */) {\r\n                    lastInput.parentVNode = nextVNode;\r\n                }\r\n                instance._lastInput = nextInput;\r\n                instance._vNode = nextVNode;\r\n                if (didUpdate) {\r\n                    patch(lastInput, nextInput, parentDom, lifecycle, childContext, isSVG, isRecycling);\r\n                    if (hasComponentDidUpdate && instance.componentDidUpdate) {\r\n                        instance.componentDidUpdate(lastProps, lastState);\r\n                    }\r\n                    if (!isNull(options.afterUpdate)) {\r\n                        options.afterUpdate(nextVNode);\r\n                    }\r\n                    if (options.findDOMNodeEnabled) {\r\n                        componentToDOMNodeMap.set(instance, nextInput.dom);\r\n                    }\r\n                }\r\n                nextVNode.dom = nextInput.dom;\r\n            }\r\n            instance._updating = false;\r\n        }\r\n        else {\r\n            var shouldUpdate = true;\r\n            var lastProps$1 = lastVNode.props;\r\n            var nextHooks = nextVNode.ref;\r\n            var nextHooksDefined = !isNullOrUndef(nextHooks);\r\n            var lastInput$1 = lastVNode.children;\r\n            var nextInput$1 = lastInput$1;\r\n            nextVNode.dom = lastVNode.dom;\r\n            nextVNode.children = lastInput$1;\r\n            if (lastKey !== nextKey) {\r\n                shouldUpdate = true;\r\n            }\r\n            else {\r\n                if (nextHooksDefined &&\r\n                    !isNullOrUndef(nextHooks.onComponentShouldUpdate)) {\r\n                    shouldUpdate = nextHooks.onComponentShouldUpdate(lastProps$1, nextProps);\r\n                }\r\n            }\r\n            if (shouldUpdate !== false) {\r\n                if (nextHooksDefined &&\r\n                    !isNullOrUndef(nextHooks.onComponentWillUpdate)) {\r\n                    nextHooks.onComponentWillUpdate(lastProps$1, nextProps);\r\n                }\r\n                nextInput$1 = nextType(nextProps, context);\r\n                if (isInvalid(nextInput$1)) {\r\n                    nextInput$1 = createVoidVNode();\r\n                }\r\n                else if (isStringOrNumber(nextInput$1) && nextInput$1 !== NO_OP) {\r\n                    nextInput$1 = createTextVNode(nextInput$1, null);\r\n                }\r\n                else if (isArray(nextInput$1)) {\r\n                    if (process.env.NODE_ENV !== \"production\") {\r\n                        throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n                    }\r\n                    throwError();\r\n                }\r\n                else if (isObject(nextInput$1)) {\r\n                    if (!isNull(nextInput$1.dom)) {\r\n                        nextInput$1 = directClone(nextInput$1);\r\n                    }\r\n                }\r\n                if (nextInput$1 !== NO_OP) {\r\n                    patch(lastInput$1, nextInput$1, parentDom, lifecycle, context, isSVG, isRecycling);\r\n                    nextVNode.children = nextInput$1;\r\n                    if (nextHooksDefined &&\r\n                        !isNullOrUndef(nextHooks.onComponentDidUpdate)) {\r\n                        nextHooks.onComponentDidUpdate(lastProps$1, nextProps);\r\n                    }\r\n                    nextVNode.dom = nextInput$1.dom;\r\n                }\r\n            }\r\n            if (nextInput$1.flags & 28 /* Component */) {\r\n                nextInput$1.parentVNode = nextVNode;\r\n            }\r\n            else if (lastInput$1.flags & 28 /* Component */) {\r\n                lastInput$1.parentVNode = nextVNode;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction patchText(lastVNode, nextVNode) {\r\n    var nextText = nextVNode.children;\r\n    var dom = lastVNode.dom;\r\n    nextVNode.dom = dom;\r\n    if (lastVNode.children !== nextText) {\r\n        dom.nodeValue = nextText;\r\n    }\r\n}\r\nfunction patchVoid(lastVNode, nextVNode) {\r\n    nextVNode.dom = lastVNode.dom;\r\n}\r\nfunction patchNonKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var lastChildrenLength = lastChildren.length;\r\n    var nextChildrenLength = nextChildren.length;\r\n    var commonLength = lastChildrenLength > nextChildrenLength\r\n        ? nextChildrenLength\r\n        : lastChildrenLength;\r\n    var i = 0;\r\n    for (; i < commonLength; i++) {\r\n        var nextChild = nextChildren[i];\r\n        if (nextChild.dom) {\r\n            nextChild = nextChildren[i] = directClone(nextChild);\r\n        }\r\n        patch(lastChildren[i], nextChild, dom, lifecycle, context, isSVG, isRecycling);\r\n    }\r\n    if (lastChildrenLength < nextChildrenLength) {\r\n        for (i = commonLength; i < nextChildrenLength; i++) {\r\n            var nextChild$1 = nextChildren[i];\r\n            if (nextChild$1.dom) {\r\n                nextChild$1 = nextChildren[i] = directClone(nextChild$1);\r\n            }\r\n            appendChild(dom, mount(nextChild$1, null, lifecycle, context, isSVG));\r\n        }\r\n    }\r\n    else if (nextChildrenLength === 0) {\r\n        removeAllChildren(dom, lastChildren, lifecycle, isRecycling);\r\n    }\r\n    else if (lastChildrenLength > nextChildrenLength) {\r\n        for (i = commonLength; i < lastChildrenLength; i++) {\r\n            unmount(lastChildren[i], dom, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction patchKeyedChildren(a, b, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var aLength = a.length;\r\n    var bLength = b.length;\r\n    var aEnd = aLength - 1;\r\n    var bEnd = bLength - 1;\r\n    var aStart = 0;\r\n    var bStart = 0;\r\n    var i;\r\n    var j;\r\n    var aNode;\r\n    var bNode;\r\n    var nextNode;\r\n    var nextPos;\r\n    var node;\r\n    if (aLength === 0) {\r\n        if (bLength > 0) {\r\n            mountArrayChildren(b, dom, lifecycle, context, isSVG);\r\n        }\r\n        return;\r\n    }\r\n    else if (bLength === 0) {\r\n        removeAllChildren(dom, a, lifecycle, isRecycling);\r\n        return;\r\n    }\r\n    var aStartNode = a[aStart];\r\n    var bStartNode = b[bStart];\r\n    var aEndNode = a[aEnd];\r\n    var bEndNode = b[bEnd];\r\n    if (bStartNode.dom) {\r\n        b[bStart] = bStartNode = directClone(bStartNode);\r\n    }\r\n    if (bEndNode.dom) {\r\n        b[bEnd] = bEndNode = directClone(bEndNode);\r\n    }\r\n    // Step 1\r\n    /* eslint no-constant-condition: 0 */\r\n    outer: while (true) {\r\n        // Sync nodes with the same key at the beginning.\r\n        while (aStartNode.key === bStartNode.key) {\r\n            patch(aStartNode, bStartNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            aStart++;\r\n            bStart++;\r\n            if (aStart > aEnd || bStart > bEnd) {\r\n                break outer;\r\n            }\r\n            aStartNode = a[aStart];\r\n            bStartNode = b[bStart];\r\n            if (bStartNode.dom) {\r\n                b[bStart] = bStartNode = directClone(bStartNode);\r\n            }\r\n        }\r\n        // Sync nodes with the same key at the end.\r\n        while (aEndNode.key === bEndNode.key) {\r\n            patch(aEndNode, bEndNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            aEnd--;\r\n            bEnd--;\r\n            if (aStart > aEnd || bStart > bEnd) {\r\n                break outer;\r\n            }\r\n            aEndNode = a[aEnd];\r\n            bEndNode = b[bEnd];\r\n            if (bEndNode.dom) {\r\n                b[bEnd] = bEndNode = directClone(bEndNode);\r\n            }\r\n        }\r\n        // Move and sync nodes from right to left.\r\n        if (aEndNode.key === bStartNode.key) {\r\n            patch(aEndNode, bStartNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            insertOrAppend(dom, bStartNode.dom, aStartNode.dom);\r\n            aEnd--;\r\n            bStart++;\r\n            aEndNode = a[aEnd];\r\n            bStartNode = b[bStart];\r\n            if (bStartNode.dom) {\r\n                b[bStart] = bStartNode = directClone(bStartNode);\r\n            }\r\n            continue;\r\n        }\r\n        // Move and sync nodes from left to right.\r\n        if (aStartNode.key === bEndNode.key) {\r\n            patch(aStartNode, bEndNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            nextPos = bEnd + 1;\r\n            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n            insertOrAppend(dom, bEndNode.dom, nextNode);\r\n            aStart++;\r\n            bEnd--;\r\n            aStartNode = a[aStart];\r\n            bEndNode = b[bEnd];\r\n            if (bEndNode.dom) {\r\n                b[bEnd] = bEndNode = directClone(bEndNode);\r\n            }\r\n            continue;\r\n        }\r\n        break;\r\n    }\r\n    if (aStart > aEnd) {\r\n        if (bStart <= bEnd) {\r\n            nextPos = bEnd + 1;\r\n            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n            while (bStart <= bEnd) {\r\n                node = b[bStart];\r\n                if (node.dom) {\r\n                    b[bStart] = node = directClone(node);\r\n                }\r\n                bStart++;\r\n                insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n            }\r\n        }\r\n    }\r\n    else if (bStart > bEnd) {\r\n        while (aStart <= aEnd) {\r\n            unmount(a[aStart++], dom, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n    else {\r\n        aLength = aEnd - aStart + 1;\r\n        bLength = bEnd - bStart + 1;\r\n        var sources = new Array(bLength);\r\n        // Mark all nodes as inserted.\r\n        for (i = 0; i < bLength; i++) {\r\n            sources[i] = -1;\r\n        }\r\n        var moved = false;\r\n        var pos = 0;\r\n        var patched = 0;\r\n        // When sizes are small, just loop them through\r\n        if (bLength <= 4 || aLength * bLength <= 16) {\r\n            for (i = aStart; i <= aEnd; i++) {\r\n                aNode = a[i];\r\n                if (patched < bLength) {\r\n                    for (j = bStart; j <= bEnd; j++) {\r\n                        bNode = b[j];\r\n                        if (aNode.key === bNode.key) {\r\n                            sources[j - bStart] = i;\r\n                            if (pos > j) {\r\n                                moved = true;\r\n                            }\r\n                            else {\r\n                                pos = j;\r\n                            }\r\n                            if (bNode.dom) {\r\n                                b[j] = bNode = directClone(bNode);\r\n                            }\r\n                            patch(aNode, bNode, dom, lifecycle, context, isSVG, isRecycling);\r\n                            patched++;\r\n                            a[i] = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var keyIndex = new Map();\r\n            // Map keys by their index in array\r\n            for (i = bStart; i <= bEnd; i++) {\r\n                keyIndex.set(b[i].key, i);\r\n            }\r\n            // Try to patch same keys\r\n            for (i = aStart; i <= aEnd; i++) {\r\n                aNode = a[i];\r\n                if (patched < bLength) {\r\n                    j = keyIndex.get(aNode.key);\r\n                    if (!isUndefined(j)) {\r\n                        bNode = b[j];\r\n                        sources[j - bStart] = i;\r\n                        if (pos > j) {\r\n                            moved = true;\r\n                        }\r\n                        else {\r\n                            pos = j;\r\n                        }\r\n                        if (bNode.dom) {\r\n                            b[j] = bNode = directClone(bNode);\r\n                        }\r\n                        patch(aNode, bNode, dom, lifecycle, context, isSVG, isRecycling);\r\n                        patched++;\r\n                        a[i] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // fast-path: if nothing patched remove all old and add all new\r\n        if (aLength === a.length && patched === 0) {\r\n            removeAllChildren(dom, a, lifecycle, isRecycling);\r\n            while (bStart < bLength) {\r\n                node = b[bStart];\r\n                if (node.dom) {\r\n                    b[bStart] = node = directClone(node);\r\n                }\r\n                bStart++;\r\n                insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), null);\r\n            }\r\n        }\r\n        else {\r\n            i = aLength - patched;\r\n            while (i > 0) {\r\n                aNode = a[aStart++];\r\n                if (!isNull(aNode)) {\r\n                    unmount(aNode, dom, lifecycle, true, isRecycling);\r\n                    i--;\r\n                }\r\n            }\r\n            if (moved) {\r\n                var seq = lis_algorithm(sources);\r\n                j = seq.length - 1;\r\n                for (i = bLength - 1; i >= 0; i--) {\r\n                    if (sources[i] === -1) {\r\n                        pos = i + bStart;\r\n                        node = b[pos];\r\n                        if (node.dom) {\r\n                            b[pos] = node = directClone(node);\r\n                        }\r\n                        nextPos = pos + 1;\r\n                        nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                        insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n                    }\r\n                    else {\r\n                        if (j < 0 || i !== seq[j]) {\r\n                            pos = i + bStart;\r\n                            node = b[pos];\r\n                            nextPos = pos + 1;\r\n                            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                            insertOrAppend(dom, node.dom, nextNode);\r\n                        }\r\n                        else {\r\n                            j--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (patched !== bLength) {\r\n                // when patched count doesn't match b length we need to insert those new ones\r\n                // loop backwards so we can use insertBefore\r\n                for (i = bLength - 1; i >= 0; i--) {\r\n                    if (sources[i] === -1) {\r\n                        pos = i + bStart;\r\n                        node = b[pos];\r\n                        if (node.dom) {\r\n                            b[pos] = node = directClone(node);\r\n                        }\r\n                        nextPos = pos + 1;\r\n                        nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                        insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// // https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction lis_algorithm(arr) {\r\n    var p = arr.slice(0);\r\n    var result = [0];\r\n    var i;\r\n    var j;\r\n    var u;\r\n    var v;\r\n    var c;\r\n    var len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        var arrI = arr[i];\r\n        if (arrI === -1) {\r\n            continue;\r\n        }\r\n        j = result[result.length - 1];\r\n        if (arr[j] < arrI) {\r\n            p[i] = j;\r\n            result.push(i);\r\n            continue;\r\n        }\r\n        u = 0;\r\n        v = result.length - 1;\r\n        while (u < v) {\r\n            c = ((u + v) / 2) | 0;\r\n            if (arr[result[c]] < arrI) {\r\n                u = c + 1;\r\n            }\r\n            else {\r\n                v = c;\r\n            }\r\n        }\r\n        if (arrI < arr[result[u]]) {\r\n            if (u > 0) {\r\n                p[i] = result[u - 1];\r\n            }\r\n            result[u] = i;\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\r\nfunction isAttrAnEvent(attr) {\r\n    return attr[0] === \"o\" && attr[1] === \"n\";\r\n}\r\nfunction patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue) {\r\n    if (lastValue !== nextValue) {\r\n        if (skipProps.has(prop) || (hasControlledValue && prop === \"value\")) {\r\n            return;\r\n        }\r\n        else if (booleanProps.has(prop)) {\r\n            prop = prop === \"autoFocus\" ? prop.toLowerCase() : prop;\r\n            dom[prop] = !!nextValue;\r\n        }\r\n        else if (strictProps.has(prop)) {\r\n            var value = isNullOrUndef(nextValue) ? \"\" : nextValue;\r\n            if (dom[prop] !== value) {\r\n                dom[prop] = value;\r\n            }\r\n        }\r\n        else if (isAttrAnEvent(prop)) {\r\n            patchEvent(prop, lastValue, nextValue, dom);\r\n        }\r\n        else if (isNullOrUndef(nextValue)) {\r\n            dom.removeAttribute(prop);\r\n        }\r\n        else if (prop === \"style\") {\r\n            patchStyle(lastValue, nextValue, dom);\r\n        }\r\n        else if (prop === \"dangerouslySetInnerHTML\") {\r\n            var lastHtml = lastValue && lastValue.__html;\r\n            var nextHtml = nextValue && nextValue.__html;\r\n            if (lastHtml !== nextHtml) {\r\n                if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {\r\n                    dom.innerHTML = nextHtml;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // We optimize for NS being boolean. Its 99.9% time false\r\n            if (isSVG && namespaces.has(prop)) {\r\n                // If we end up in this path we can read property again\r\n                dom.setAttributeNS(namespaces.get(prop), prop, nextValue);\r\n            }\r\n            else {\r\n                dom.setAttribute(prop, nextValue);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchEvent(name, lastValue, nextValue, dom) {\r\n    if (lastValue !== nextValue) {\r\n        if (delegatedEvents.has(name)) {\r\n            handleEvent(name, lastValue, nextValue, dom);\r\n        }\r\n        else {\r\n            var nameLowerCase = name.toLowerCase();\r\n            var domEvent = dom[nameLowerCase];\r\n            // if the function is wrapped, that means it's been controlled by a wrapper\r\n            if (domEvent && domEvent.wrapped) {\r\n                return;\r\n            }\r\n            if (!isFunction(nextValue) && !isNullOrUndef(nextValue)) {\r\n                var linkEvent = nextValue.event;\r\n                if (linkEvent && isFunction(linkEvent)) {\r\n                    dom[nameLowerCase] = function (e) {\r\n                        linkEvent(nextValue.data, e);\r\n                    };\r\n                }\r\n                else {\r\n                    if (process.env.NODE_ENV !== \"production\") {\r\n                        throwError((\"an event on a VNode \\\"\" + name + \"\\\". was not a function or a valid linkEvent.\"));\r\n                    }\r\n                    throwError();\r\n                }\r\n            }\r\n            else {\r\n                dom[nameLowerCase] = nextValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n// We are assuming here that we come from patchProp routine\r\n// -nextAttrValue cannot be null or undefined\r\nfunction patchStyle(lastAttrValue, nextAttrValue, dom) {\r\n    var domStyle = dom.style;\r\n    var style;\r\n    var value;\r\n    if (isString(nextAttrValue)) {\r\n        domStyle.cssText = nextAttrValue;\r\n        return;\r\n    }\r\n    if (!isNullOrUndef(lastAttrValue) && !isString(lastAttrValue)) {\r\n        for (style in nextAttrValue) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            value = nextAttrValue[style];\r\n            if (value !== lastAttrValue[style]) {\r\n                domStyle[style] =\r\n                    !isNumber(value) || isUnitlessNumber.has(style)\r\n                        ? value\r\n                        : value + \"px\";\r\n            }\r\n        }\r\n        for (style in lastAttrValue) {\r\n            if (isNullOrUndef(nextAttrValue[style])) {\r\n                domStyle[style] = \"\";\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (style in nextAttrValue) {\r\n            value = nextAttrValue[style];\r\n            domStyle[style] =\r\n                !isNumber(value) || isUnitlessNumber.has(style) ? value : value + \"px\";\r\n        }\r\n    }\r\n}\r\nfunction removeProp(prop, lastValue, dom, nextFlags) {\r\n    if (prop === \"value\") {\r\n        // When removing value of select element, it needs to be set to null instead empty string, because empty string is valid value for option which makes that option selected\r\n        // MS IE/Edge don't follow html spec for textArea and input elements and we need to set empty string to value in those cases to avoid \"null\" and \"undefined\" texts\r\n        dom.value = nextFlags & 2048 /* SelectElement */ ? null : \"\";\r\n    }\r\n    else if (prop === \"style\") {\r\n        dom.removeAttribute(\"style\");\r\n    }\r\n    else if (isAttrAnEvent(prop)) {\r\n        handleEvent(prop, lastValue, null, dom);\r\n    }\r\n    else {\r\n        dom.removeAttribute(prop);\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction mount(vNode, parentDom, lifecycle, context, isSVG) {\r\n    var flags = vNode.flags;\r\n    if (flags & 3970 /* Element */) {\r\n        return mountElement(vNode, parentDom, lifecycle, context, isSVG);\r\n    }\r\n    else if (flags & 28 /* Component */) {\r\n        return mountComponent(vNode, parentDom, lifecycle, context, isSVG, (flags & 4 /* ComponentClass */) > 0);\r\n    }\r\n    else if (flags & 4096 /* Void */) {\r\n        return mountVoid(vNode, parentDom);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        return mountText(vNode, parentDom);\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            if (typeof vNode === \"object\") {\r\n                throwError((\"mount() received an object that's not a valid VNode, you should stringify it first. Object: \\\"\" + (JSON.stringify(vNode)) + \"\\\".\"));\r\n            }\r\n            else {\r\n                throwError((\"mount() expects a valid VNode, instead it received an object with the type \\\"\" + (typeof vNode) + \"\\\".\"));\r\n            }\r\n        }\r\n        throwError();\r\n    }\r\n}\r\nfunction mountText(vNode, parentDom) {\r\n    var dom = document.createTextNode(vNode.children);\r\n    vNode.dom = dom;\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountVoid(vNode, parentDom) {\r\n    var dom = document.createTextNode(\"\");\r\n    vNode.dom = dom;\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountElement(vNode, parentDom, lifecycle, context, isSVG) {\r\n    var dom;\r\n    if (options.recyclingEnabled) {\r\n        dom = recycleElement(vNode, lifecycle, context, isSVG);\r\n        if (!isNull(dom)) {\r\n            if (!isNull(parentDom)) {\r\n                appendChild(parentDom, dom);\r\n            }\r\n            return dom;\r\n        }\r\n    }\r\n    var flags = vNode.flags;\r\n    isSVG = isSVG || (flags & 128 /* SvgElement */) > 0;\r\n    dom = documentCreateElement(vNode.type, isSVG);\r\n    var children = vNode.children;\r\n    var props = vNode.props;\r\n    var className = vNode.className;\r\n    var ref = vNode.ref;\r\n    vNode.dom = dom;\r\n    if (!isInvalid(children)) {\r\n        if (isStringOrNumber(children)) {\r\n            setTextContent(dom, children);\r\n        }\r\n        else {\r\n            var childrenIsSVG = isSVG === true && vNode.type !== \"foreignObject\";\r\n            if (isArray(children)) {\r\n                mountArrayChildren(children, dom, lifecycle, context, childrenIsSVG);\r\n            }\r\n            else if (isVNode(children)) {\r\n                mount(children, dom, lifecycle, context, childrenIsSVG);\r\n            }\r\n        }\r\n    }\r\n    if (!isNull(props)) {\r\n        var hasControlledValue = false;\r\n        var isFormElement = (flags & 3584 /* FormElement */) > 0;\r\n        if (isFormElement) {\r\n            hasControlledValue = isControlledFormElement(props);\r\n        }\r\n        for (var prop in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\r\n        }\r\n        if (isFormElement) {\r\n            processElement(flags, vNode, dom, props, true, hasControlledValue);\r\n        }\r\n    }\r\n    if (className !== null) {\r\n        if (isSVG) {\r\n            dom.setAttribute(\"class\", className);\r\n        }\r\n        else {\r\n            dom.className = className;\r\n        }\r\n    }\r\n    if (!isNull(ref)) {\r\n        mountRef(dom, ref, lifecycle);\r\n    }\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountArrayChildren(children, dom, lifecycle, context, isSVG) {\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n        var child = children[i];\r\n        // Verify can string/number be here. might cause de-opt. - Normalization takes care of it.\r\n        if (!isInvalid(child)) {\r\n            if (child.dom) {\r\n                children[i] = child = directClone(child);\r\n            }\r\n            mount(children[i], dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n}\r\nfunction mountComponent(vNode, parentDom, lifecycle, context, isSVG, isClass) {\r\n    var dom;\r\n    if (options.recyclingEnabled) {\r\n        dom = recycleComponent(vNode, lifecycle, context, isSVG);\r\n        if (!isNull(dom)) {\r\n            if (!isNull(parentDom)) {\r\n                appendChild(parentDom, dom);\r\n            }\r\n            return dom;\r\n        }\r\n    }\r\n    var type = vNode.type;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var ref = vNode.ref;\r\n    if (isClass) {\r\n        var instance = createClassComponentInstance(vNode, type, props, context, isSVG, lifecycle);\r\n        var input = instance._lastInput;\r\n        instance._vNode = vNode;\r\n        vNode.dom = dom = mount(input, null, lifecycle, instance._childContext, isSVG);\r\n        if (!isNull(parentDom)) {\r\n            appendChild(parentDom, dom);\r\n        }\r\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\r\n        instance._updating = false;\r\n        if (options.findDOMNodeEnabled) {\r\n            componentToDOMNodeMap.set(instance, dom);\r\n        }\r\n    }\r\n    else {\r\n        var input$1 = createFunctionalComponentInput(vNode, type, props, context);\r\n        vNode.dom = dom = mount(input$1, null, lifecycle, context, isSVG);\r\n        vNode.children = input$1;\r\n        mountFunctionalComponentCallbacks(props, ref, dom, lifecycle);\r\n        if (!isNull(parentDom)) {\r\n            appendChild(parentDom, dom);\r\n        }\r\n    }\r\n    return dom;\r\n}\r\nfunction mountClassComponentCallbacks(vNode, ref, instance, lifecycle) {\r\n    if (ref) {\r\n        if (isFunction(ref)) {\r\n            ref(instance);\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                if (isStringOrNumber(ref)) {\r\n                    throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n                }\r\n                else if (isObject(ref) && vNode.flags & 4 /* ComponentClass */) {\r\n                    throwError(\"functional component lifecycle events are not supported on ES2015 class components.\");\r\n                }\r\n                else {\r\n                    throwError((\"a bad value for \\\"ref\\\" was used on component: \\\"\" + (JSON.stringify(ref)) + \"\\\"\"));\r\n                }\r\n            }\r\n            throwError();\r\n        }\r\n    }\r\n    var hasDidMount = !isUndefined(instance.componentDidMount);\r\n    var afterMount = options.afterMount;\r\n    if (hasDidMount || !isNull(afterMount)) {\r\n        lifecycle.addListener((function () {\r\n            instance._updating = true;\r\n            if (afterMount) {\r\n                afterMount(vNode);\r\n            }\r\n            if (hasDidMount) {\r\n                instance.componentDidMount();\r\n            }\r\n            instance._updating = false;\r\n        }));\r\n    }\r\n}\r\nfunction mountFunctionalComponentCallbacks(props, ref, dom, lifecycle) {\r\n    if (ref) {\r\n        if (!isNullOrUndef(ref.onComponentWillMount)) {\r\n            ref.onComponentWillMount(props);\r\n        }\r\n        if (!isNullOrUndef(ref.onComponentDidMount)) {\r\n            lifecycle.addListener((function () { return ref.onComponentDidMount(dom, props); }));\r\n        }\r\n    }\r\n}\r\nfunction mountRef(dom, value, lifecycle) {\r\n    if (isFunction(value)) {\r\n        lifecycle.addListener((function () { return value(dom); }));\r\n    }\r\n    else {\r\n        if (isInvalid(value)) {\r\n            return;\r\n        }\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n        }\r\n        throwError();\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n// We need EMPTY_OBJ defined in one place.\r\n// Its used for comparison so we cant inline it into shared\r\nvar EMPTY_OBJ = {};\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    Object.freeze(EMPTY_OBJ);\r\n}\r\nfunction createClassComponentInstance(vNode, Component, props, context, isSVG, lifecycle) {\r\n    if (isUndefined(context)) {\r\n        context = EMPTY_OBJ; // Context should not be mutable\r\n    }\r\n    var instance = new Component(props, context);\r\n    vNode.children = instance;\r\n    instance._blockSetState = false;\r\n    instance.context = context;\r\n    if (instance.props === EMPTY_OBJ) {\r\n        instance.props = props;\r\n    }\r\n    // setState callbacks must fire after render is done when called from componentWillReceiveProps or componentWillMount\r\n    instance._lifecycle = lifecycle;\r\n    instance._unmounted = false;\r\n    instance._pendingSetState = true;\r\n    instance._isSVG = isSVG;\r\n    if (!isNullOrUndef(instance.componentWillMount)) {\r\n        instance._blockRender = true;\r\n        instance.componentWillMount();\r\n        instance._blockRender = false;\r\n    }\r\n    var childContext;\r\n    if (!isNullOrUndef(instance.getChildContext)) {\r\n        childContext = instance.getChildContext();\r\n    }\r\n    if (isNullOrUndef(childContext)) {\r\n        instance._childContext = context;\r\n    }\r\n    else {\r\n        instance._childContext = combineFrom(context, childContext);\r\n    }\r\n    if (!isNull(options.beforeRender)) {\r\n        options.beforeRender(instance);\r\n    }\r\n    var input = instance.render(props, instance.state, context);\r\n    if (!isNull(options.afterRender)) {\r\n        options.afterRender(instance);\r\n    }\r\n    if (isArray(input)) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n        }\r\n        throwError();\r\n    }\r\n    else if (isInvalid(input)) {\r\n        input = createVoidVNode();\r\n    }\r\n    else if (isStringOrNumber(input)) {\r\n        input = createTextVNode(input, null);\r\n    }\r\n    else {\r\n        if (input.dom) {\r\n            input = directClone(input);\r\n        }\r\n        if (input.flags & 28 /* Component */) {\r\n            // if we have an input that is also a component, we run into a tricky situation\r\n            // where the root vNode needs to always have the correct DOM entry\r\n            // so we break monomorphism on our input and supply it our vNode as parentVNode\r\n            // we can optimise this in the future, but this gets us out of a lot of issues\r\n            input.parentVNode = vNode;\r\n        }\r\n    }\r\n    instance._pendingSetState = false;\r\n    instance._lastInput = input;\r\n    return instance;\r\n}\r\nfunction replaceLastChildAndUnmount(lastInput, nextInput, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    replaceVNode(parentDom, mount(nextInput, null, lifecycle, context, isSVG), lastInput, lifecycle, isRecycling);\r\n}\r\nfunction replaceVNode(parentDom, dom, vNode, lifecycle, isRecycling) {\r\n    unmount(vNode, null, lifecycle, false, isRecycling);\r\n    replaceChild(parentDom, dom, vNode.dom);\r\n}\r\nfunction createFunctionalComponentInput(vNode, component, props, context) {\r\n    var input = component(props, context);\r\n    if (isArray(input)) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n        }\r\n        throwError();\r\n    }\r\n    else if (isInvalid(input)) {\r\n        input = createVoidVNode();\r\n    }\r\n    else if (isStringOrNumber(input)) {\r\n        input = createTextVNode(input, null);\r\n    }\r\n    else {\r\n        if (input.dom) {\r\n            input = directClone(input);\r\n        }\r\n        if (input.flags & 28 /* Component */) {\r\n            // if we have an input that is also a component, we run into a tricky situation\r\n            // where the root vNode needs to always have the correct DOM entry\r\n            // so we break monomorphism on our input and supply it our vNode as parentVNode\r\n            // we can optimise this in the future, but this gets us out of a lot of issues\r\n            input.parentVNode = vNode;\r\n        }\r\n    }\r\n    return input;\r\n}\r\nfunction setTextContent(dom, text) {\r\n    if (text !== \"\") {\r\n        dom.textContent = text;\r\n    }\r\n    else {\r\n        dom.appendChild(document.createTextNode(\"\"));\r\n    }\r\n}\r\nfunction updateTextContent(dom, text) {\r\n    dom.firstChild.nodeValue = text;\r\n}\r\nfunction appendChild(parentDom, dom) {\r\n    parentDom.appendChild(dom);\r\n}\r\nfunction insertOrAppend(parentDom, newNode, nextNode) {\r\n    if (isNullOrUndef(nextNode)) {\r\n        appendChild(parentDom, newNode);\r\n    }\r\n    else {\r\n        parentDom.insertBefore(newNode, nextNode);\r\n    }\r\n}\r\nfunction documentCreateElement(tag, isSVG) {\r\n    if (isSVG === true) {\r\n        return document.createElementNS(svgNS, tag);\r\n    }\r\n    else {\r\n        return document.createElement(tag);\r\n    }\r\n}\r\nfunction replaceWithNewNode(lastNode, nextNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    unmount(lastNode, null, lifecycle, false, isRecycling);\r\n    var dom = mount(nextNode, null, lifecycle, context, isSVG);\r\n    nextNode.dom = dom;\r\n    replaceChild(parentDom, dom, lastNode.dom);\r\n}\r\nfunction replaceChild(parentDom, nextDom, lastDom) {\r\n    if (!parentDom) {\r\n        parentDom = lastDom.parentNode;\r\n    }\r\n    parentDom.replaceChild(nextDom, lastDom);\r\n}\r\nfunction removeChild(parentDom, dom) {\r\n    parentDom.removeChild(dom);\r\n}\r\nfunction removeAllChildren(dom, children, lifecycle, isRecycling) {\r\n    if (!options.recyclingEnabled || (options.recyclingEnabled && !isRecycling)) {\r\n        removeChildren(null, children, lifecycle, isRecycling);\r\n    }\r\n    dom.textContent = \"\";\r\n}\r\nfunction removeChildren(dom, children, lifecycle, isRecycling) {\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n        var child = children[i];\r\n        if (!isInvalid(child)) {\r\n            unmount(child, dom, lifecycle, true, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction isKeyed(lastChildren, nextChildren) {\r\n    return (nextChildren.length > 0 &&\r\n        !isNullOrUndef(nextChildren[0]) &&\r\n        !isNullOrUndef(nextChildren[0].key) &&\r\n        lastChildren.length > 0 &&\r\n        !isNullOrUndef(lastChildren[0]) &&\r\n        !isNullOrUndef(lastChildren[0].key));\r\n}\r\nfunction isSameInnerHTML(dom, innerHTML) {\r\n    var tempdom = document.createElement(\"i\");\r\n    tempdom.innerHTML = innerHTML;\r\n    return tempdom.innerHTML === dom.innerHTML;\r\n}\r\nfunction isSamePropsInnerHTML(dom, props) {\r\n    return Boolean(props &&\r\n        props.dangerouslySetInnerHTML &&\r\n        props.dangerouslySetInnerHTML.__html &&\r\n        isSameInnerHTML(dom, props.dangerouslySetInnerHTML.__html));\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction VNode(children, className, flags, key, props, ref, type) {\r\n    this.children = children;\r\n    this.className = className;\r\n    this.dom = null;\r\n    this.flags = flags;\r\n    this.key = key;\r\n    this.props = props;\r\n    this.ref = ref;\r\n    this.type = type;\r\n}\r\n/**\r\n * Creates virtual node\r\n * @param {number} flags\r\n * @param {string|Function|null} type\r\n * @param {string|null=} className\r\n * @param {object=} children\r\n * @param {object=} props\r\n * @param {*=} key\r\n * @param {object|Function=} ref\r\n * @param {boolean=} noNormalise\r\n * @returns {VNode} returns new virtual node\r\n */\r\nfunction createVNode(flags, type, className, children, props, key, ref, noNormalise) {\r\n    if (flags & 16 /* ComponentUnknown */) {\r\n        flags = isStatefulComponent(type)\r\n            ? 4 /* ComponentClass */\r\n            : 8 /* ComponentFunction */;\r\n    }\r\n    var vNode = new VNode(children === void 0 ? null : children, className === void 0 ? null : className, flags, key === void 0 ? null : key, props === void 0 ? null : props, ref === void 0 ? null : ref, type);\r\n    if (noNormalise !== true) {\r\n        normalize(vNode);\r\n    }\r\n    if (options.createVNode !== null) {\r\n        options.createVNode(vNode);\r\n    }\r\n    return vNode;\r\n}\r\nfunction directClone(vNodeToClone) {\r\n    var newVNode;\r\n    var flags = vNodeToClone.flags;\r\n    if (flags & 28 /* Component */) {\r\n        var props;\r\n        var propsToClone = vNodeToClone.props;\r\n        if (isNull(propsToClone)) {\r\n            props = EMPTY_OBJ;\r\n        }\r\n        else {\r\n            props = {};\r\n            for (var key in propsToClone) {\r\n                props[key] = propsToClone[key];\r\n            }\r\n        }\r\n        newVNode = createVNode(flags, vNodeToClone.type, null, null, props, vNodeToClone.key, vNodeToClone.ref, true);\r\n        var newProps = newVNode.props;\r\n        var newChildren = newProps.children;\r\n        // we need to also clone component children that are in props\r\n        // as the children may also have been hoisted\r\n        if (newChildren) {\r\n            if (isArray(newChildren)) {\r\n                var len = newChildren.length;\r\n                if (len > 0) {\r\n                    var tmpArray = [];\r\n                    for (var i = 0; i < len; i++) {\r\n                        var child = newChildren[i];\r\n                        if (isStringOrNumber(child)) {\r\n                            tmpArray.push(child);\r\n                        }\r\n                        else if (!isInvalid(child) && isVNode(child)) {\r\n                            tmpArray.push(directClone(child));\r\n                        }\r\n                    }\r\n                    newProps.children = tmpArray;\r\n                }\r\n            }\r\n            else if (isVNode(newChildren)) {\r\n                newProps.children = directClone(newChildren);\r\n            }\r\n        }\r\n        newVNode.children = null;\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        var children = vNodeToClone.children;\r\n        var props$1;\r\n        var propsToClone$1 = vNodeToClone.props;\r\n        if (propsToClone$1 === null) {\r\n            props$1 = EMPTY_OBJ;\r\n        }\r\n        else {\r\n            props$1 = {};\r\n            for (var key$1 in propsToClone$1) {\r\n                props$1[key$1] = propsToClone$1[key$1];\r\n            }\r\n        }\r\n        newVNode = createVNode(flags, vNodeToClone.type, vNodeToClone.className, children, props$1, vNodeToClone.key, vNodeToClone.ref, !children);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        newVNode = createTextVNode(vNodeToClone.children, vNodeToClone.key);\r\n    }\r\n    return newVNode;\r\n}\r\n/*\r\n directClone is preferred over cloneVNode and used internally also.\r\n This function makes Inferno backwards compatible.\r\n And can be tree-shaked by modern bundlers\r\n\n Would be nice to combine this with directClone but could not do it without breaking change\r\n */\r\n/**\r\n * Clones given virtual node by creating new instance of it\r\n * @param {VNode} vNodeToClone virtual node to be cloned\r\n * @param {Props=} props additional props for new virtual node\r\n * @param {...*} _children new children for new virtual node\r\n * @returns {VNode} new virtual node\r\n */\r\nfunction cloneVNode(vNodeToClone, props) {\n    var _children = [], len$2 = arguments.length - 2;\n    while ( len$2-- > 0 ) _children[ len$2 ] = arguments[ len$2 + 2 ];\n\r\n    var children = _children;\r\n    var childrenLen = _children.length;\r\n    if (childrenLen > 0 && !isUndefined(_children[0])) {\r\n        if (!props) {\r\n            props = {};\r\n        }\r\n        if (childrenLen === 1) {\r\n            children = _children[0];\r\n        }\r\n        if (!isUndefined(children)) {\r\n            props.children = children;\r\n        }\r\n    }\r\n    var newVNode;\r\n    if (isArray(vNodeToClone)) {\r\n        var tmpArray = [];\r\n        for (var i = 0, len = vNodeToClone.length; i < len; i++) {\r\n            tmpArray.push(directClone(vNodeToClone[i]));\r\n        }\r\n        newVNode = tmpArray;\r\n    }\r\n    else {\r\n        var flags = vNodeToClone.flags;\r\n        var className = vNodeToClone.className;\r\n        var key = vNodeToClone.key;\r\n        var ref = vNodeToClone.ref;\r\n        if (props) {\r\n            if (props.hasOwnProperty(\"className\")) {\r\n                className = props.className;\r\n            }\r\n            if (props.hasOwnProperty(\"ref\")) {\r\n                ref = props.ref;\r\n            }\r\n            if (props.hasOwnProperty(\"key\")) {\r\n                key = props.key;\r\n            }\r\n        }\r\n        if (flags & 28 /* Component */) {\r\n            newVNode = createVNode(flags, vNodeToClone.type, className, null, !vNodeToClone.props && !props\r\n                ? EMPTY_OBJ\r\n                : combineFrom(vNodeToClone.props, props), key, ref, true);\r\n            var newProps = newVNode.props;\r\n            if (newProps) {\r\n                var newChildren = newProps.children;\r\n                // we need to also clone component children that are in props\r\n                // as the children may also have been hoisted\r\n                if (newChildren) {\r\n                    if (isArray(newChildren)) {\r\n                        var len$1 = newChildren.length;\r\n                        if (len$1 > 0) {\r\n                            var tmpArray$1 = [];\r\n                            for (var i$1 = 0; i$1 < len$1; i$1++) {\r\n                                var child = newChildren[i$1];\r\n                                if (isStringOrNumber(child)) {\r\n                                    tmpArray$1.push(child);\r\n                                }\r\n                                else if (!isInvalid(child) && isVNode(child)) {\r\n                                    tmpArray$1.push(directClone(child));\r\n                                }\r\n                            }\r\n                            newProps.children = tmpArray$1;\r\n                        }\r\n                    }\r\n                    else if (isVNode(newChildren)) {\r\n                        newProps.children = directClone(newChildren);\r\n                    }\r\n                }\r\n            }\r\n            newVNode.children = null;\r\n        }\r\n        else if (flags & 3970 /* Element */) {\r\n            children =\r\n                props && !isUndefined(props.children)\r\n                    ? props.children\r\n                    : vNodeToClone.children;\r\n            newVNode = createVNode(flags, vNodeToClone.type, className, children, !vNodeToClone.props && !props\r\n                ? EMPTY_OBJ\r\n                : combineFrom(vNodeToClone.props, props), key, ref, false);\r\n        }\r\n        else if (flags & 1 /* Text */) {\r\n            newVNode = createTextVNode(vNodeToClone.children, key);\r\n        }\r\n    }\r\n    return newVNode;\r\n}\r\nfunction createVoidVNode() {\r\n    return createVNode(4096 /* Void */, null);\r\n}\r\nfunction createTextVNode(text, key) {\r\n    return createVNode(1 /* Text */, null, null, text, null, key);\r\n}\r\nfunction isVNode(o) {\r\n    return !!o.flags;\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\nfunction applyKey(key, vNode) {\r\n    vNode.key = key;\r\n    return vNode;\r\n}\r\nfunction applyKeyIfMissing(key, vNode) {\r\n    if (isNumber(key)) {\r\n        key = \".\" + key;\r\n    }\r\n    if (isNull(vNode.key) || vNode.key[0] === \".\") {\r\n        return applyKey(key, vNode);\r\n    }\r\n    return vNode;\r\n}\r\nfunction applyKeyPrefix(key, vNode) {\r\n    vNode.key = key + vNode.key;\r\n    return vNode;\r\n}\r\nfunction _normalizeVNodes(nodes, result, index, currentKey) {\r\n    for (var len = nodes.length; index < len; index++) {\r\n        var n = nodes[index];\r\n        var key = currentKey + \".\" + index;\r\n        if (!isInvalid(n)) {\r\n            if (isArray(n)) {\r\n                _normalizeVNodes(n, result, 0, key);\r\n            }\r\n            else {\r\n                if (isStringOrNumber(n)) {\r\n                    n = createTextVNode(n, null);\r\n                }\r\n                else if ((isVNode(n) && n.dom) || (n.key && n.key[0] === \".\")) {\r\n                    n = directClone(n);\r\n                }\r\n                if (isNull(n.key) || n.key[0] === \".\") {\r\n                    n = applyKey(key, n);\r\n                }\r\n                else {\r\n                    n = applyKeyPrefix(currentKey, n);\r\n                }\r\n                result.push(n);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction normalizeVNodes(nodes) {\r\n    var newNodes;\r\n    // we assign $ which basically means we've flagged this array for future note\r\n    // if it comes back again, we need to clone it, as people are using it\r\n    // in an immutable way\r\n    // tslint:disable\r\n    if (nodes[\"$\"] === true) {\r\n        nodes = nodes.slice();\r\n    }\r\n    else {\r\n        nodes[\"$\"] = true;\r\n    }\r\n    // tslint:enable\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n        var n = nodes[i];\r\n        if (isInvalid(n) || isArray(n)) {\r\n            var result = (newNodes || nodes).slice(0, i);\r\n            _normalizeVNodes(nodes, result, i, \"\");\r\n            return result;\r\n        }\r\n        else if (isStringOrNumber(n)) {\r\n            if (!newNodes) {\r\n                newNodes = nodes.slice(0, i);\r\n            }\r\n            newNodes.push(applyKeyIfMissing(i, createTextVNode(n, null)));\r\n        }\r\n        else if ((isVNode(n) && n.dom !== null) ||\r\n            (isNull(n.key) && (n.flags & 64 /* HasNonKeyedChildren */) === 0)) {\r\n            if (!newNodes) {\r\n                newNodes = nodes.slice(0, i);\r\n            }\r\n            newNodes.push(applyKeyIfMissing(i, directClone(n)));\r\n        }\r\n        else if (newNodes) {\r\n            newNodes.push(applyKeyIfMissing(i, directClone(n)));\r\n        }\r\n    }\r\n    return newNodes || nodes;\r\n}\r\nfunction normalizeChildren(children) {\r\n    if (isArray(children)) {\r\n        return normalizeVNodes(children);\r\n    }\r\n    else if (isVNode(children) && children.dom !== null) {\r\n        return directClone(children);\r\n    }\r\n    return children;\r\n}\r\nfunction normalizeProps(vNode, props, children) {\r\n    if (vNode.flags & 3970 /* Element */) {\r\n        if (isNullOrUndef(children) && props.hasOwnProperty(\"children\")) {\r\n            vNode.children = props.children;\r\n        }\r\n        if (props.hasOwnProperty(\"className\")) {\r\n            vNode.className = props.className || null;\r\n            delete props.className;\r\n        }\r\n    }\r\n    if (props.hasOwnProperty(\"ref\")) {\r\n        vNode.ref = props.ref;\r\n        delete props.ref;\r\n    }\r\n    if (props.hasOwnProperty(\"key\")) {\r\n        vNode.key = props.key;\r\n        delete props.key;\r\n    }\r\n}\r\nfunction getFlagsForElementVnode(type) {\r\n    if (type === \"svg\") {\r\n        return 128 /* SvgElement */;\r\n    }\r\n    else if (type === \"input\") {\r\n        return 512 /* InputElement */;\r\n    }\r\n    else if (type === \"select\") {\r\n        return 2048 /* SelectElement */;\r\n    }\r\n    else if (type === \"textarea\") {\r\n        return 1024 /* TextareaElement */;\r\n    }\r\n    else if (type === \"media\") {\r\n        return 256 /* MediaElement */;\r\n    }\r\n    return 2 /* HtmlElement */;\r\n}\r\nfunction normalize(vNode) {\r\n    var props = vNode.props;\r\n    var children = vNode.children;\r\n    // convert a wrongly created type back to element\r\n    // Primitive node doesn't have defaultProps, only Component\r\n    if (vNode.flags & 28 /* Component */) {\r\n        // set default props\r\n        var type = vNode.type;\r\n        var defaultProps = type.defaultProps;\r\n        if (!isNullOrUndef(defaultProps)) {\r\n            if (!props) {\r\n                props = vNode.props = defaultProps; // Create new object if only defaultProps given\r\n            }\r\n            else {\r\n                for (var prop in defaultProps) {\r\n                    if (isUndefined(props[prop])) {\r\n                        props[prop] = defaultProps[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isString(type)) {\r\n            vNode.flags = getFlagsForElementVnode(type);\r\n            if (props && props.children) {\r\n                vNode.children = props.children;\r\n                children = props.children;\r\n            }\r\n        }\r\n    }\r\n    if (props) {\r\n        normalizeProps(vNode, props, children);\r\n        if (!isInvalid(props.children)) {\r\n            props.children = normalizeChildren(props.children);\r\n        }\r\n    }\r\n    if (!isInvalid(children)) {\r\n        vNode.children = normalizeChildren(children);\r\n    }\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        // This code will be stripped out from production CODE\r\n        // It helps users to track errors in their applications.\r\n        var verifyKeys = function (vNodes) {\r\n            var keyValues = vNodes.map((function (vnode) {\r\n                return vnode.key;\r\n            }));\r\n            keyValues.some((function (item, idx) {\r\n                var hasDuplicate = keyValues.indexOf(item) !== idx;\r\n                if (hasDuplicate) {\r\n                    warning(\"Inferno normalisation(...): Encountered two children with same key, all keys must be unique within its siblings. Duplicated key is:\" +\r\n                        item);\r\n                }\r\n                return hasDuplicate;\r\n            }));\r\n        };\r\n        if (vNode.children && Array.isArray(vNode.children)) {\r\n            verifyKeys(vNode.children);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n/**\r\n * Links given data to event as first parameter\r\n * @param {*} data data to be linked, it will be available in function as first parameter\r\n * @param {Function} event Function to be called when event occurs\r\n * @returns {{data: *, event: Function}}\r\n */\r\nfunction linkEvent(data, event) {\r\n    if (isFunction(event)) {\r\n        return { data: data, event: event };\r\n    }\r\n    return null; // Return null when event is invalid, to avoid creating unnecessary event handlers\r\n}\n\n/**\r\n * @module Inferno\r\n */ /** TypeDoc Comment */\r\n/* tslint:disable:object-literal-sort-keys */\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    /* tslint:disable-next-line:no-empty */\r\n    var testFunc = function testFn() { };\r\n    if ((testFunc.name || testFunc.toString()).indexOf(\"testFn\") ===\r\n        -1) {\r\n        warning(\"It looks like you're using a minified copy of the development build \" +\r\n            \"of Inferno. When deploying Inferno apps to production, make sure to use \" +\r\n            \"the production build which skips development warnings and is faster. \" +\r\n            \"See http://infernojs.org for more details.\");\r\n    }\r\n}\r\nvar version = \"3.8.2\";\r\n// we duplicate it so it plays nicely with different module loading systems\r\nvar index = {\r\n    EMPTY_OBJ: EMPTY_OBJ,\r\n    NO_OP: NO_OP,\r\n    cloneVNode: cloneVNode,\r\n    createRenderer: createRenderer,\r\n    createVNode: createVNode,\r\n    findDOMNode: findDOMNode,\r\n    getFlagsForElementVnode: getFlagsForElementVnode,\r\n    internal_DOMNodeMap: componentToDOMNodeMap,\r\n    internal_isUnitlessNumber: isUnitlessNumber,\r\n    internal_normalize: normalize,\r\n    internal_patch: patch,\r\n    linkEvent: linkEvent,\r\n    options: options,\r\n    render: render,\r\n    version: version\r\n};\n\nexports['default'] = index;\nexports.EMPTY_OBJ = EMPTY_OBJ;\nexports.NO_OP = NO_OP;\nexports.cloneVNode = cloneVNode;\nexports.createRenderer = createRenderer;\nexports.createVNode = createVNode;\nexports.findDOMNode = findDOMNode;\nexports.getFlagsForElementVnode = getFlagsForElementVnode;\nexports.internal_DOMNodeMap = componentToDOMNodeMap;\nexports.internal_isUnitlessNumber = isUnitlessNumber;\nexports.internal_normalize = normalize;\nexports.internal_patch = patch;\nexports.linkEvent = linkEvent;\nexports.options = options;\nexports.render = render;\nexports.version = version;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/inferno/dist/index.js\n// module id = 2\n// module chunks = 0","module.exports = require('./dist').default;\nmodule.exports.default = module.exports;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/inferno-component/index.js\n// module id = 3\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar inferno = require('inferno');\n\n/**\r\n * @module Inferno-Shared\r\n */ /** TypeDoc Comment */\r\nvar NO_OP = \"$NO_OP\";\r\nvar ERROR_MSG = \"a runtime error occured! Use Inferno in development environment to find the error.\";\r\n// This should be boolean and not reference to window.document\r\nvar isBrowser = !!(typeof window !== \"undefined\" && window.document);\r\n// this is MUCH faster than .constructor === Array and instanceof Array\r\n// in Node 7 and the later versions of V8, slower in older versions though\r\nvar isArray = Array.isArray;\r\nfunction isStringOrNumber(o) {\r\n    var type = typeof o;\r\n    return type === \"string\" || type === \"number\";\r\n}\r\nfunction isNullOrUndef(o) {\r\n    return isUndefined(o) || isNull(o);\r\n}\r\nfunction isInvalid(o) {\r\n    return isNull(o) || o === false || isTrue(o) || isUndefined(o);\r\n}\r\nfunction isFunction(o) {\r\n    return typeof o === \"function\";\r\n}\r\nfunction isNull(o) {\r\n    return o === null;\r\n}\r\nfunction isTrue(o) {\r\n    return o === true;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === void 0;\r\n}\r\nfunction throwError(message) {\r\n    if (!message) {\r\n        message = ERROR_MSG;\r\n    }\r\n    throw new Error((\"Inferno Error: \" + message));\r\n}\r\nfunction combineFrom(first, second) {\r\n    var out = {};\r\n    if (first) {\r\n        for (var key in first) {\r\n            out[key] = first[key];\r\n        }\r\n    }\r\n    if (second) {\r\n        for (var key$1 in second) {\r\n            out[key$1] = second[key$1];\r\n        }\r\n    }\r\n    return out;\r\n}\n\n/**\r\n * @module Inferno-Component\r\n */ /** TypeDoc Comment */\r\n// Make sure u use EMPTY_OBJ from 'inferno', otherwise it'll be a different reference\r\nvar noOp = ERROR_MSG;\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    noOp =\r\n        \"Inferno Error: Can only update a mounted or mounting component. This usually means you called setState() or forceUpdate() on an unmounted component. This is a no-op.\";\r\n}\r\nvar componentCallbackQueue = new Map();\r\n// when a components root VNode is also a component, we can run into issues\r\n// this will recursively look for vNode.parentNode if the VNode is a component\r\nfunction updateParentComponentVNodes(vNode, dom) {\r\n    if (vNode.flags & 28 /* Component */) {\r\n        var parentVNode = vNode.parentVNode;\r\n        if (parentVNode) {\r\n            parentVNode.dom = dom;\r\n            updateParentComponentVNodes(parentVNode, dom);\r\n        }\r\n    }\r\n}\r\nvar resolvedPromise = Promise.resolve();\r\nfunction addToQueue(component, force, callback) {\r\n    var queue = componentCallbackQueue.get(component);\r\n    if (queue === void 0) {\r\n        queue = [];\r\n        componentCallbackQueue.set(component, queue);\r\n        resolvedPromise.then((function () {\r\n            componentCallbackQueue.delete(component);\r\n            component._updating = true;\r\n            applyState(component, force, (function () {\r\n                for (var i = 0, len = queue.length; i < len; i++) {\r\n                    queue[i].call(component);\r\n                }\r\n            }));\r\n            component._updating = false;\r\n        }));\r\n    }\r\n    if (!isNullOrUndef(callback)) {\r\n        queue.push(callback);\r\n    }\r\n}\r\nfunction queueStateChanges(component, newState, callback) {\r\n    if (isFunction(newState)) {\r\n        newState = newState(component.state, component.props, component.context);\r\n    }\r\n    var pending = component._pendingState;\r\n    if (isNullOrUndef(pending)) {\r\n        component._pendingState = pending = newState;\r\n    }\r\n    else {\r\n        for (var stateKey in newState) {\r\n            pending[stateKey] = newState[stateKey];\r\n        }\r\n    }\r\n    if (isBrowser && !component._pendingSetState && !component._blockRender) {\r\n        if (!component._updating) {\r\n            component._pendingSetState = true;\r\n            component._updating = true;\r\n            applyState(component, false, callback);\r\n            component._updating = false;\r\n        }\r\n        else {\r\n            addToQueue(component, false, callback);\r\n        }\r\n    }\r\n    else {\r\n        var state = component.state;\r\n        if (state === null) {\r\n            component.state = pending;\r\n        }\r\n        else {\r\n            for (var key in pending) {\r\n                state[key] = pending[key];\r\n            }\r\n        }\r\n        component._pendingState = null;\r\n        if (!isNullOrUndef(callback) && component._blockRender) {\r\n            component._lifecycle.addListener(callback.bind(component));\r\n        }\r\n    }\r\n}\r\nfunction applyState(component, force, callback) {\r\n    if (component._unmounted) {\r\n        return;\r\n    }\r\n    if (force || !component._blockRender) {\r\n        component._pendingSetState = false;\r\n        var pendingState = component._pendingState;\r\n        var prevState = component.state;\r\n        var nextState = combineFrom(prevState, pendingState);\r\n        var props = component.props;\r\n        var context = component.context;\r\n        component._pendingState = null;\r\n        var nextInput = component._updateComponent(prevState, nextState, props, props, context, force, true);\r\n        var didUpdate = true;\r\n        if (isInvalid(nextInput)) {\r\n            nextInput = inferno.createVNode(4096 /* Void */, null);\r\n        }\r\n        else if (nextInput === NO_OP) {\r\n            nextInput = component._lastInput;\r\n            didUpdate = false;\r\n        }\r\n        else if (isStringOrNumber(nextInput)) {\r\n            nextInput = inferno.createVNode(1 /* Text */, null, null, nextInput);\r\n        }\r\n        else if (isArray(nextInput)) {\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                throwError(\"a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.\");\r\n            }\r\n            throwError();\r\n        }\r\n        var lastInput = component._lastInput;\r\n        var vNode = component._vNode;\r\n        var parentDom = (lastInput.dom && lastInput.dom.parentNode) ||\r\n            (lastInput.dom = vNode.dom);\r\n        component._lastInput = nextInput;\r\n        if (didUpdate) {\r\n            var childContext;\r\n            if (!isNullOrUndef(component.getChildContext)) {\r\n                childContext = component.getChildContext();\r\n            }\r\n            if (isNullOrUndef(childContext)) {\r\n                childContext = component._childContext;\r\n            }\r\n            else {\r\n                childContext = combineFrom(context, childContext);\r\n            }\r\n            var lifeCycle = component._lifecycle;\r\n            inferno.internal_patch(lastInput, nextInput, parentDom, lifeCycle, childContext, component._isSVG, false);\r\n            lifeCycle.trigger();\r\n            if (!isNullOrUndef(component.componentDidUpdate)) {\r\n                component.componentDidUpdate(props, prevState, context);\r\n            }\r\n            if (!isNull(inferno.options.afterUpdate)) {\r\n                inferno.options.afterUpdate(vNode);\r\n            }\r\n        }\r\n        var dom = (vNode.dom = nextInput.dom);\r\n        if (inferno.options.findDOMNodeEnabled) {\r\n            inferno.internal_DOMNodeMap.set(component, nextInput.dom);\r\n        }\r\n        updateParentComponentVNodes(vNode, dom);\r\n    }\r\n    else {\r\n        component.state = component._pendingState;\r\n        component._pendingState = null;\r\n    }\r\n    if (!isNullOrUndef(callback)) {\r\n        callback.call(component);\r\n    }\r\n}\r\nvar Component = function Component(props, context) {\r\n    this.state = null;\r\n    this._blockRender = false;\r\n    this._blockSetState = true;\r\n    this._pendingSetState = false;\r\n    this._pendingState = null;\r\n    this._lastInput = null;\r\n    this._vNode = null;\r\n    this._unmounted = false;\r\n    this._lifecycle = null;\r\n    this._childContext = null;\r\n    this._isSVG = false;\r\n    this._updating = true;\r\n    /** @type {object} */\r\n    this.props = props || inferno.EMPTY_OBJ;\r\n    /** @type {object} */\r\n    this.context = context || inferno.EMPTY_OBJ; // context should not be mutable\r\n};\r\nComponent.prototype.forceUpdate = function forceUpdate (callback) {\r\n    if (this._unmounted || !isBrowser) {\r\n        return;\r\n    }\r\n    applyState(this, true, callback);\r\n};\r\nComponent.prototype.setState = function setState (newState, callback) {\r\n    if (this._unmounted) {\r\n        return;\r\n    }\r\n    if (!this._blockSetState) {\r\n        queueStateChanges(this, newState, callback);\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError(\"cannot update state via setState() in componentWillUpdate() or constructor.\");\r\n        }\r\n        throwError();\r\n    }\r\n};\r\nComponent.prototype._updateComponent = function _updateComponent (prevState, nextState, prevProps, nextProps, context, force, fromSetState) {\r\n    if (this._unmounted === true) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            throwError(noOp);\r\n        }\r\n        throwError();\r\n    }\r\n    if (prevProps !== nextProps ||\r\n        nextProps === inferno.EMPTY_OBJ ||\r\n        prevState !== nextState ||\r\n        force) {\r\n        if (prevProps !== nextProps || nextProps === inferno.EMPTY_OBJ) {\r\n            if (!isNullOrUndef(this.componentWillReceiveProps) && !fromSetState) {\r\n                // keep a copy of state before componentWillReceiveProps\r\n                var beforeState = combineFrom(this.state);\r\n                this._blockRender = true;\r\n                this.componentWillReceiveProps(nextProps, context);\r\n                this._blockRender = false;\r\n                var afterState = this.state;\r\n                if (beforeState !== afterState) {\r\n                    // if state changed in componentWillReceiveProps, reassign the beforeState\r\n                    this.state = beforeState;\r\n                    // set the afterState as pending state so the change gets picked up below\r\n                    this._pendingSetState = true;\r\n                    this._pendingState = afterState;\r\n                }\r\n            }\r\n            if (this._pendingSetState) {\r\n                nextState = combineFrom(nextState, this._pendingState);\r\n                this._pendingSetState = false;\r\n                this._pendingState = null;\r\n            }\r\n        }\r\n        /* Update if scu is not defined, or it returns truthy value or force */\r\n        if (force ||\r\n            isNullOrUndef(this.shouldComponentUpdate) ||\r\n            (this.shouldComponentUpdate &&\r\n                this.shouldComponentUpdate(nextProps, nextState, context))) {\r\n            if (!isNullOrUndef(this.componentWillUpdate)) {\r\n                this._blockSetState = true;\r\n                this.componentWillUpdate(nextProps, nextState, context);\r\n                this._blockSetState = false;\r\n            }\r\n            this.props = nextProps;\r\n            this.state = nextState;\r\n            this.context = context;\r\n            if (inferno.options.beforeRender) {\r\n                inferno.options.beforeRender(this);\r\n            }\r\n            var render = this.render(nextProps, nextState, context);\r\n            if (inferno.options.afterRender) {\r\n                inferno.options.afterRender(this);\r\n            }\r\n            return render;\r\n        }\r\n        else {\r\n            this.props = nextProps;\r\n            this.state = nextState;\r\n            this.context = context;\r\n        }\r\n    }\r\n    return NO_OP;\r\n};\r\n// tslint:disable-next-line:no-empty\r\nComponent.prototype.render = function render (nextProps, nextState, nextContext) { };\n\nexports['default'] = Component;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/inferno-component/dist/index.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}